(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    279428,       5955]
NotebookOptionsPosition[    260151,       5632]
NotebookOutlinePosition[    260726,       5654]
CellTagsIndexPosition[    260639,       5649]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Modifying Lists", "Title",
 CellChangeTimes->{{3.461405268132181*^9, 3.461405274978758*^9}, {
  3.461405374110767*^9, 3.461405382736993*^9}, {3.461405964606715*^9, 
  3.461405964996537*^9}, {3.461412674365797*^9, 3.461412678153265*^9}, {
  3.47448983369319*^9, 3.474489837928254*^9}, {3.630696562351103*^9, 
  3.630696568117642*^9}, {3.631988928117742*^9, 
  3.6319889301724463`*^9}},ExpressionUUID->"48298fc7-2660-4fd4-8675-\
31aa0a9305ed"],

Cell[TextData[{
 "Math 213 - Math with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\nChristopher Hanusa"
}], "Subsubtitle",
 CellChangeTimes->{{3.4614053946645927`*^9, 3.4614054230893087`*^9}, {
  3.461405971637244*^9, 3.4614060079862947`*^9}, {3.474489844264483*^9, 
  3.474489895841402*^9}, {3.505485689221858*^9, 3.505485696180904*^9}, {
  3.53815066431697*^9, 3.538150664587603*^9}, {3.630691352563725*^9, 
  3.6306913589949083`*^9}},ExpressionUUID->"5d50180e-d392-4ee0-a78c-\
d5fe87d833f6"],

Cell[CellGroupData[{

Cell["Aim", "Section",
 CellChangeTimes->{{3.505485680414241*^9, 
  3.50548573910983*^9}},ExpressionUUID->"6a60c3c8-73d7-438e-ace7-\
0b68b70cd0f6"],

Cell[TextData[{
 "This tutorial first starts off with some shortcuts to make your life with \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " easier.  Then we develop tools for creating, accessing, and modifying \
lists."
}], "Text",
 CellChangeTimes->{{3.505485741709942*^9, 3.505485911210339*^9}, {
  3.5054859461638536`*^9, 3.505486140785309*^9}, {3.569597235122435*^9, 
  3.56959724256273*^9}, {3.631988357249017*^9, 3.631988375104192*^9}, {
  3.631988705128955*^9, 3.63198874613913*^9}, {3.63198884890553*^9, 
  3.631988859824958*^9}, {3.631993478341037*^9, 
  3.631993482877342*^9}},ExpressionUUID->"7a8ded6f-5a00-42f3-bb34-\
7ebaaa516880"],

Cell["\<\
Tip: You can evaluate ALL cells in this file in order using the Evaluation > \
Evaluate Notebook command.\
\>", "Text",
 CellChangeTimes->{{3.631988429035975*^9, 
  3.6319884582042847`*^9}},ExpressionUUID->"90b86baf-80b9-4cfc-8c32-\
ae62704fe56f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Defining variables using the ",
 StyleBox["=", "Input",
  FontSize->24],
 StyleBox[" operator", "Text",
  FontSize->24]
}], "Section",
 CellChangeTimes->{{3.631972962373425*^9, 3.631972975717177*^9}, {
  3.631988657783813*^9, 
  3.63198868327985*^9}},ExpressionUUID->"27f472de-893d-4515-bbf1-\
25bd41d85050"],

Cell[TextData[{
 "It is often helpful to define the output of a command to be able to reuse \
it later.  To do this, use the ",
 StyleBox["=", "Input",
  FontSize->18],
 " operator:"
}], "Text",
 CellChangeTimes->{{3.631972983253553*^9, 
  3.631973041936504*^9}},ExpressionUUID->"10d2ef9d-dcd3-455d-bbd7-\
7b12ea2b37a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", 
  RowBox[{"Range", "[", "3", "]"}]}]], "Input",
 CellChangeTimes->{{3.631973046774384*^9, 
  3.6319730531304092`*^9}},ExpressionUUID->"6d9ad8f2-c417-41d1-99dd-\
3a0de5a62722"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.631973054583465*^9, 
  3.6319730933050222`*^9},ExpressionUUID->"d16ba5e3-e2d0-4ba1-b806-\
295360094ca7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.631973090297827*^9},ExpressionUUID->"101851ef-3b75-4e85-91f3-\
7a52a7b37381"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.631973090955099*^9, 
  3.631973094684285*^9}},ExpressionUUID->"0c06819e-408e-49de-9a1c-\
f82e43e424c3"]
}, Open  ]],

Cell["\<\
If you don\[CloseCurlyQuote]t want to see the output of a command, you can \
end the line with a semicolon.\
\>", "Text",
 CellChangeTimes->{{3.631973058053413*^9, 3.631973078618202*^9}, {
  3.6319884747492847`*^9, 
  3.631988481493525*^9}},ExpressionUUID->"87262e9d-94ec-47a8-89f7-\
c2378e9d52dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"Range", "[", "4", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.63197308084085*^9, 3.63197308334016*^9}, 
   3.631973118861582*^9},ExpressionUUID->"9bdd27b2-170d-41c6-b669-\
b1ccfd8a43a1"],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{{3.6319731149485807`*^9, 
  3.631973121017107*^9}},ExpressionUUID->"43bd3741-a138-427f-9f4c-\
dcebcafe29f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.631973116752783*^9, 
  3.631973121530757*^9}},ExpressionUUID->"6b3a8457-ba20-4548-8f6e-\
03e9afcd1433"]
}, Open  ]],

Cell[TextData[{
 "Important: it matters the order in which you evaluate commands.  For \
example, if you re-evaluate the first instance of ",
 StyleBox["a", "Input",
  FontSize->14],
 ", it will return its last-defined definition, which is ",
 StyleBox["{1,2,3,4}", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.631973098971304*^9, 3.631973155894184*^9}, {
  3.631988490958012*^9, 
  3.631988513151126*^9}},ExpressionUUID->"ce114402-7e87-465a-bee9-\
6bf646a8d402"],

Cell[TextData[{
 "I HIGHLY suggest that you give descriptive names to your variables. Since \
all built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands start with a captial letter, a nice convention to use for your \
own variable names is to start with a lowercase letter and if variable is \
multiple words long, capitalize the start of each new word. "
}], "Text",
 CellChangeTimes->{{3.631988758323704*^9, 3.6319887862608843`*^9}, {
  3.6319921217128763`*^9, 3.63199221394837*^9}, {3.631992382510112*^9, 
  3.63199240287119*^9}},ExpressionUUID->"074c5a93-84a6-4fed-9de5-\
e8454cc06a0a"],

Cell[BoxData[
 RowBox[{"iAmANewVariable", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"Pi", ",", 
    RowBox[{"2", "Pi"}], ",", 
    RowBox[{"Pi", "/", "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.631992215772217*^9, 3.631992225381585*^9}, {
  3.631992303673835*^9, 
  3.63199231144236*^9}},ExpressionUUID->"89e4a95b-d6f8-416c-a149-\
0f951267928e"],

Cell[BoxData[
 RowBox[{"heyYouWhatsThatSound", "=", 
  RowBox[{"Play", "[", 
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"440", " ", "2", "Pi", " ", "t"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.63199232578058*^9, 
  3.631992356006901*^9}},ExpressionUUID->"e1c7321d-c8e1-478a-862f-\
6753e7f97f2f"],

Cell[TextData[{
 " (OK, the provided example names aren\[CloseCurlyQuote]t very ",
 StyleBox["descriptive",
  FontSlant->"Italic"],
 ", but you get the idea....it\[CloseCurlyQuote]s #likeAHashtag.)"
}], "Text",
 CellChangeTimes->{{3.631992404479724*^9, 3.631992449944283*^9}, {
  3.6319934958137293`*^9, 
  3.631993499589817*^9}},ExpressionUUID->"ca1a0523-3530-47d9-aafe-\
e00d58e66284"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Shortcut: the ",
 StyleBox["%", "Input",
  FontSize->24],
 " operator"
}], "Section",
 CellChangeTimes->{{3.631988557106394*^9, 3.6319885624496317`*^9}, {
  3.631988694048513*^9, 
  3.6319886943923492`*^9}},ExpressionUUID->"72ca3935-183f-4f8a-9fb4-\
b16fa4fe9b2a"],

Cell[TextData[{
 "A useful but slightly dangerous operator is ",
 StyleBox["%", "Input",
  FontSize->16],
 ", which stands for the most recent output.  So, for instance, if you decide \
to make a list, and then decide you want to create a scatterplot, you can do \
the following: "
}], "Text",
 CellChangeTimes->{{3.6319885260595493`*^9, 3.631988529416007*^9}, {
  3.6319885768264713`*^9, 3.631988584218792*^9}, {3.6319886980966597`*^9, 
  3.631988700328754*^9}, {3.631992944962832*^9, 
  3.631993047815222*^9}},ExpressionUUID->"aa3fa9cd-a5b7-49c6-bfbb-\
5ac28cd4bb99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"{", "100", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631993051129685*^9, 
  3.63199307071301*^9}},ExpressionUUID->"72acacee-8aeb-4421-9133-\
871669accddf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "2", ",", "2", ",", "1", ",", "3", ",", "2", ",", "3", ",", "2", 
   ",", "2", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "3", ",", "1", ",", "2", 
   ",", "1", ",", "2", ",", "3", ",", "3", ",", "1", ",", "2", ",", "1", ",", 
   "1", ",", "3", ",", "3", ",", "1", ",", "2", ",", "2", ",", "1", ",", "1", 
   ",", "2", ",", "3", ",", "1", ",", "2", ",", "1", ",", "1", ",", "2", ",", 
   "1", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", ",", 
   "2", ",", "2", ",", "1", ",", "2", ",", "3", ",", "3", ",", "1", ",", "2", 
   ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "3", ",", "2", ",", 
   "1", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", 
   ",", "2", ",", "2", ",", "1", ",", "3", ",", "1", ",", "2", ",", "2", ",", 
   "3", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "3", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.631993064027032*^9, 
  3.631993071189405*^9}},ExpressionUUID->"6b434e47-faa6-47f6-9f57-\
940ea8418e3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.631973157818639*^9, 3.6319731585629683`*^9}, {
  3.631993072569309*^9, 
  3.6319930758170757`*^9}},ExpressionUUID->"b2da7f90-33f1-48c4-9731-\
abc080627064"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxtj8suQ1EYhf8YGRoYGBggIiIi7ne69UZLyzktZSqMvcJ+tP1IfQSEJVlf
NGnO+bLWt/Y+y68f9ftMRLx9/b+fP79p4/cl/f+cBc8l9+bRW0B/EfkS8hXw
Kvpr4HWcvwHeBG+Bt7G3g3wX99lDvg//AHyI/hH2jpGfID/F3hn4HP4F/Evk
DXDyvQyOK+9nsfabzrnp/WjBb3k/2ji/7f3oYL+DvIv9rvfjGjk4bnA+OHrw
e8j7uF8f+S32wXGHXKz7DbA/8H4M4Q+9H/fwxdp/8DyJtQcuYvkV/Mr7ufJ+
QR41/NrzDC7ox8j308j7GVzE8sc4f+z9jLwgj0f44CzW94vlP+H+YvngIpY/
gT/xfkZekMczfLG+H1zE8l/+/E8cbYOi
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 100.}, {0, 3.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6319731588574142`*^9, 
  3.631993076260624*^9},ExpressionUUID->"669b76e2-2743-4bbb-ad5f-\
c40584db4f44"]
}, Open  ]],

Cell["\<\
The reason it is dangerous is related to the above discussion where the order \
in which you evaluate commands matters.  If you tried to re-evaluate the \
previous line of code, you would get an error, because you can\
\[CloseCurlyQuote]t create a scatterplot of a scatterplot!\
\>", "Text",
 CellChangeTimes->{{3.631993079128849*^9, 
  3.631993155196473*^9}},ExpressionUUID->"07d8a1db-a460-471b-9bfa-\
d590f30e4776"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.631993156677052*^9, 
  3.631993159918551*^9}},ExpressionUUID->"5961464f-e354-4846-b949-\
58051be37b58"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ListPlot", "::", "lpn"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(\\*GraphicsBox[List[List[], List[Hue[0.67`, 0.6`, \
0.6`], Directive[PointSize[0.01388888888888889`], RGBColor[0.368417`, \
0.506779`, 0.709798`], AbsoluteThickness[1.6`]], PointBox[List[List[1.`, \
2.`], List[2.`, 2.`], List[3.`, 2.`], List[4.`, 1.`], List[5.`, 3.`], \
List[6.`, 2.`], List[7.`, 3.`], List[8.`, 2.`], List[9.`, 2.`], List[10.`, \
3.`], List[11.`, 3.`], List[12.`, 1.`], List[13.`, 1.`], List[14.`, 1.`], \
List[15.`, 1.`], List[16.`, 3.`], List[17.`, 1.`], List[18.`, 2.`], \
List[19.`, 1.`], List[20.`, 3.`], List[21.`, 3.`], List[22.`, 1.`], \
List[23.`, 2.`], List[24.`, 1.`], List[25.`, 2.`], List[26.`, 3.`], \
List[27.`, 3.`], List[28.`, 1.`], List[29.`, 2.`], List[30.`, 1.`], \
List[31.`, 1.`], List[32.`, 3.`], List[33.`, 3.`], List[34.`, 1.`], \
List[35.`, 2.`], List[36.`, 2.`], List[37.`, 1.`], List[38.`, 1.`], \
List[39.`, 2.`], List[40.`, 3.`], List[41.`, 1.`], List[42.`, 2.`], \
List[43.`, 1.`], List[44.`, 1.`], List[45.`, 2.`], List[46.`, 1.`], \
List[47.`, 1.`], List[48.`, 3.`], List[49.`, 3.`], List[50.`, 1.`], \
Skeleton[50]]]], List[]], List[Rule[DisplayFunction, Identity], \
Rule[PlotRangePadding, List[List[Scaled[0.02`], Scaled[0.02`]], \
List[Scaled[0.02`], Scaled[0.05`]]]], Rule[AxesOrigin, List[0.`, 0.`]], \
Rule[PlotRange, List[List[0.`, 100.`], List[0.`, 3.`]]], \
Rule[DisplayFunction, Identity], Rule[AspectRatio, 0.6180339887498949`], \
Rule[Axes, List[True, True]], Rule[AxesLabel, List[None, None]], \
Rule[AxesOrigin, List[0.`, 0.`]], RuleDelayed[DisplayFunction, Identity], \
Rule[Frame, List[List[False, False], List[False, False]]], Rule[FrameLabel, \
List[List[None, None], List[None, None]]], Rule[FrameTicks, \
List[List[Automatic, Automatic], List[Automatic, Automatic]]], \
Rule[GridLines, List[None, None]], Rule[GridLinesStyle, \
Directive[GrayLevel[0.5`, 0.4`]]], Rule[Method, List[]], Rule[PlotRange, \
List[List[0.`, 100.`], List[0.`, 3.`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[Scaled[0.02`], Scaled[0.02`]], \
List[Scaled[0.02`], Scaled[0.05`]]]], Rule[Ticks, List[Automatic, \
Automatic]]]]\\)\[NoBreak] is not a list of numbers or pairs of numbers. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/ListPlot\\\", ButtonNote -> \
\\\"ListPlot::lpn\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.631993160411851*^9},ExpressionUUID->"8bb1bb49-b743-43a8-bf7e-\
7286ccb4d65d"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  GraphicsBox[{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxtj8suQ1EYhf8YGRoYGBggIiIi7ne69UZLyzktZSqMvcJ+tP1IfQSEJVlf
NGnO+bLWt/Y+y68f9ftMRLx9/b+fP79p4/cl/f+cBc8l9+bRW0B/EfkS8hXw
Kvpr4HWcvwHeBG+Bt7G3g3wX99lDvg//AHyI/hH2jpGfID/F3hn4HP4F/Evk
DXDyvQyOK+9nsfabzrnp/WjBb3k/2ji/7f3oYL+DvIv9rvfjGjk4bnA+OHrw
e8j7uF8f+S32wXGHXKz7DbA/8H4M4Q+9H/fwxdp/8DyJtQcuYvkV/Mr7ufJ+
QR41/NrzDC7ox8j308j7GVzE8sc4f+z9jLwgj0f44CzW94vlP+H+YvngIpY/
gT/xfkZekMczfLG+H1zE8l/+/E8cbYOi
      "]]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 100.}, {0, 3.}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], "]"}]], "Output",
 CellChangeTimes->{
  3.6319931604209623`*^9},ExpressionUUID->"4096c3d4-fa54-4423-96b4-\
b8df4c445917"]
}, Open  ]],

Cell[TextData[{
 "In the same vein is ",
 StyleBox["%%", "Input",
  FontSize->16],
 " (for two outputs back); slightly more safe might be ",
 StyleBox["Out[n]", "Input",
  FontSize->14],
 " to be explicit about wanting the nth output.  (But this will depend on the \
session in which you are working, so it would be different each time you \
re-open your notebook!!!!)  ",
 StyleBox["It is best to define a new variable when you think you will be \
using the output later.",
  Background->RGBColor[1, 1, 0]]
}], "Text",
 CellChangeTimes->{{3.6319931654206657`*^9, 
  3.631993360503044*^9}},ExpressionUUID->"3a5948dd-c74f-419e-8941-\
9ee70aecfdfc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Postfix a command using ",
 StyleBox["//", "Input",
  FontSize->24]
}], "Section",
 CellChangeTimes->{{3.6319893447866488`*^9, 3.631989361754616*^9}, {
  3.6319934655654087`*^9, 
  3.631993466180417*^9}},ExpressionUUID->"c3e6f30e-6bc9-4803-8f0c-\
5147b60c9527"],

Cell["So let\[CloseCurlyQuote]s say you have created a beautiful command such \
as", "Text",
 CellChangeTimes->{{3.6319893731710367`*^9, 
  3.6319893933242073`*^9}},ExpressionUUID->"10c63353-bf72-4ca2-8544-\
354066d0abb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"i", ",", "10"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631989397122362*^9, 3.631989416454249*^9}, {
  3.631989472650928*^9, 
  3.6319894729613657`*^9}},ExpressionUUID->"fbf7be83-f1c1-49a4-b18c-\
46669e388877"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9",
      ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", 
     "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", "10", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.63198941694081*^9, 
  3.631989473385995*^9},ExpressionUUID->"f9b1a883-1ccd-4a09-a866-\
293e86573ede"]
}, Open  ]],

Cell["\<\
And then suppose you are at the end of the line and are too lazy to go to the \
beginning of the line to display the table in a beautiful way like this:\
\>", "Text",
 CellChangeTimes->{{3.6319894223408203`*^9, 3.631989447767068*^9}, {
  3.631989577894868*^9, 
  3.631989611663207*^9}},ExpressionUUID->"da2a3c19-dc0c-4b7c-abb4-\
6dbc32a8b57e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"i", ",", "10"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6319894514470387`*^9, 
  3.631989480596478*^9}},ExpressionUUID->"286cc467-e5bb-45e9-b052-\
3dca7c48dca3"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
    {"2", "3", "4", "5", "6", "7", "8", "9", "10", "\<\"\"\>"},
    {"3", "4", "5", "6", "7", "8", "9", "10", "\<\"\"\>", "\<\"\"\>"},
    {"4", "5", "6", "7", "8", "9", "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"5", "6", "7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"6", "7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
    {"8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>"},
    {"9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8, 9, 10}, {
    3, 4, 5, 6, 7, 8, 9, 10}, {4, 5, 6, 7, 8, 9, 10}, {5, 6, 7, 8, 9, 10}, {6,
     7, 8, 9, 10}, {7, 8, 9, 10}, {8, 9, 10}, {9, 10}, {10}}]]], "Output",
 CellChangeTimes->{{3.631989466212104*^9, 
  3.631989481206696*^9}},ExpressionUUID->"f5bb50c8-46ee-447d-9771-\
bc445cec331c"]
}, Open  ]],

Cell[TextData[{
 "Instead, you are able to use the ",
 StyleBox["//", "Input",
  FontSize->16],
 StyleBox[" operator which applies the command after ",
  FontSize->14],
 StyleBox["//", "Input",
  FontSize->16],
 StyleBox[" to the start of the expression, like this:",
  FontSize->14]
}], "Text",
 CellChangeTimes->{{3.6319894856176567`*^9, 
  3.6319895552685833`*^9}},ExpressionUUID->"f6385d06-3d60-41b2-8456-\
019ce6d1c468"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"i", ",", "10"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], " ", "//", " ", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.631989559905839*^9, 
  3.631989567154859*^9}},ExpressionUUID->"0fa944b6-d83d-436f-8f25-\
ed79e940712b"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
    {"2", "3", "4", "5", "6", "7", "8", "9", "10", "\<\"\"\>"},
    {"3", "4", "5", "6", "7", "8", "9", "10", "\<\"\"\>", "\<\"\"\>"},
    {"4", "5", "6", "7", "8", "9", "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"5", "6", "7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"6", "7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"7", "8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
    {"8", "9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>"},
    {"9", 
     "10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"10", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8, 9, 10}, {
    3, 4, 5, 6, 7, 8, 9, 10}, {4, 5, 6, 7, 8, 9, 10}, {5, 6, 7, 8, 9, 10}, {6,
     7, 8, 9, 10}, {7, 8, 9, 10}, {8, 9, 10}, {9, 10}, {10}}]]], "Output",
 CellChangeTimes->{
  3.631989567599599*^9},ExpressionUUID->"56e933e7-c544-4e17-aab5-\
4fa921e40a5f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["When you\[CloseCurlyQuote]ve gotten yourself in trouble", "Section",
 CellChangeTimes->{{3.63122814412682*^9, 
  3.631228149888968*^9}},ExpressionUUID->"6906553d-7cc1-4312-bfa1-\
b1f7e0d1ff96"],

Cell[CellGroupData[{

Cell["When you don\[CloseCurlyQuote]t understand a command.", "Subsection",
 CellChangeTimes->{{3.631991619454792*^9, 
  3.631991628398411*^9}},ExpressionUUID->"cb605073-71a8-43cf-b596-\
12c1279a79f8"],

Cell[TextData[{
 "By now you should know that you can search in the Documentation Center when \
you want more information about a command.  You can get quick information \
about a command directly in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook by using the ",
 StyleBox["?", "Input",
  FontSize->16],
 " operator."
}], "Text",
 CellChangeTimes->{{3.631991630590291*^9, 
  3.631991746316676*^9}},ExpressionUUID->"53fa7c1c-2012-4396-9f20-\
7ac0613d5633"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Tally"}]], "Input",
 CellChangeTimes->{{3.631991698332426*^9, 
  3.6319917073587837`*^9}},ExpressionUUID->"ffa070d5-30e9-4ef3-9ca7-\
8e89b11df627"],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Tally\\\", \\\"[\\\", \
StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"}]\\) tallies the elements in \
\\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\), listing all distinct elements \
together with their multiplicities.\\n\\!\\(\\*RowBox[{\\\"Tally\\\", \\\"[\\\
\", RowBox[{StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"test\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) uses \
\\!\\(\\*StyleBox[\\\"test\\\", \\\"TI\\\"]\\) to determine whether pairs of \
elements should be considered equivalent, and gives a list of the first \
representatives of each equivalence class, together with their \
multiplicities.\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Tally"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.631991708644845*^9},
 CellTags->
  "Info3631973708-3263596",ExpressionUUID->"b36b2096-9f68-436b-b9cb-\
f16a2bc1efaa"]
}, Open  ]],

Cell[TextData[{
 "Notice the ",
 StyleBox[">>",
  FontSize->12],
 " symbol at the end of the command information.  Click there to go directly \
to the Documentation Center."
}], "Text",
 CellChangeTimes->{{3.631991749693323*^9, 
  3.631991811039599*^9}},ExpressionUUID->"dd2d58ee-f085-4dc5-b6db-\
db2944cd2cd3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["When you define something you shouldn\[CloseCurlyQuote]t have.", \
"Subsection",
 CellChangeTimes->{{3.631228183612741*^9, 
  3.6312281974764833`*^9}},ExpressionUUID->"93d63cd2-ec7f-45ec-8fa3-\
7d5ca718d0b9"],

Cell["Suppose you define a variable at some point:", "Text",
 CellChangeTimes->{{3.631991817563799*^9, 3.631991833936761*^9}, {
  3.631992018987096*^9, 
  3.6319920210665407`*^9}},ExpressionUUID->"a96b0102-a5ca-407b-8171-\
225e2033efe6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "10"}]], "Input",
 CellChangeTimes->{{3.631991835276457*^9, 
  3.631991840141756*^9}},ExpressionUUID->"757a1536-ba47-4827-abe9-\
e9de23260762"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.631991842204857*^9},ExpressionUUID->"c1c09e38-436d-417b-b992-\
a718a1eb5f96"]
}, Open  ]],

Cell[TextData[{
 "Perhaps later in your file you wanted to generate the list ",
 StyleBox["{x+1,x+2,x+3}", "Input",
  FontSize->14],
 " using the ",
 StyleBox["Table", "Input",
  FontSize->14],
 " command:"
}], "Text",
 CellChangeTimes->{{3.63199185061872*^9, 
  3.631991899860457*^9}},ExpressionUUID->"a8b6b6b5-344f-4f83-9dd7-\
a79771e4cf79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "+", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6319919013601017`*^9, 
  3.631991909873529*^9}},ExpressionUUID->"b308dbda-3805-4475-8a8d-\
65e3a1994b88"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", "12", ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{
  3.631991910600562*^9},ExpressionUUID->"60246022-6364-4f8f-a31f-\
b81df716ff82"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox["x", "Input",
  FontSize->16],
 " had been defined before, the generated list has no ",
 StyleBox["x", "Input",
  FontSize->16],
 "\[CloseCurlyQuote]s in it.  When you run into such a problem, you use the \
",
 StyleBox["Remove", "Input",
  FontSize->14],
 " command:"
}], "Text",
 CellChangeTimes->{{3.6319919163329277`*^9, 3.631991964671803*^9}, {
  3.6319935191215267`*^9, 
  3.6319935198231573`*^9}},ExpressionUUID->"180ea204-b718-4d89-b7be-\
551213a24656"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Remove", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "+", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.631991965845278*^9, 
  3.631991976985162*^9}},ExpressionUUID->"36e448c1-a2bd-4c1a-8341-\
35af1cfbae2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "+", "x"}], ",", 
   RowBox[{"2", "+", "x"}], ",", 
   RowBox[{"3", "+", "x"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.631991977384223*^9},ExpressionUUID->"8feb1702-517d-409f-8695-\
fc4560489c30"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["When your code won\[CloseCurlyQuote]t stop running", "Subsection",
 CellChangeTimes->{{3.631228154705267*^9, 
  3.631228201884366*^9}},ExpressionUUID->"a44c86b7-4bca-4f44-a060-\
92e03a57812f"],

Cell[TextData[{
 "We all get into infinite loops sometimes or take on too much work.  To stop \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " in the middle of a calculation, use (Option-",
 StyleBox[".", "Input",
  FontSize->16],
 ") or (Ctrl-",
 StyleBox[".", "Input",
  FontSize->16],
 ")  (That\[CloseCurlyQuote]s a period!)  \nTry it here after removing the ",
 StyleBox["(*", "Input",
  FontSize->14],
 " and ",
 StyleBox["*)", "Input",
  FontSize->14],
 " which I used to comment out the command."
}], "Text",
 CellChangeTimes->{{3.631991534766355*^9, 3.631991536174308*^9}, {
  3.631992050865666*^9, 3.6319920843894*^9}, {3.631993621805472*^9, 
  3.631993678895328*^9}, {3.631993732857643*^9, 
  3.6319937584034863`*^9}},ExpressionUUID->"ecae3c3a-96fc-473f-a0f3-\
a4e9f6b7b58b"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "0"}], ",", 
    RowBox[{"i", "\[GreaterEqual]", "0"}], ",", 
    RowBox[{"i", "++"}], ",", "i"}], "]"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.631992067436474*^9, 3.631992069395525*^9}, {
  3.631993680424046*^9, 
  3.631993729834483*^9}},ExpressionUUID->"5a0368ed-8418-4800-8f0a-\
8747c63d84d7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comprehension Questions:", "Section",
 CellChangeTimes->{{3.474483892077592*^9, 3.474483902448202*^9}, {
   3.474484348831203*^9, 3.474484352335434*^9}, {3.474484561072112*^9, 
   3.474484579531193*^9}, 3.630716709767518*^9, {3.63071827711934*^9, 
   3.630718278157937*^9}, 
   3.631227344293664*^9},ExpressionUUID->"42ed4b92-e5d8-47b8-9af4-\
58394038757b"],

Cell[TextData[{
 "1. ",
 StyleBox["Practice using the ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["%", "Input",
  FontSize->24,
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" operator.  ",
  FontColor->RGBColor[1, 0, 0]],
 "\nFirst, define and evaluate some list of even numbers by way of a ",
 StyleBox["Range", "Input",
  FontSize->18],
 " or ",
 StyleBox["Table", "Input",
  FontSize->18],
 " command.  \nThen divide the list by 2 to divide each entry by 2.  \nThen \
add 10 to the list.\nAnd then give a scatterplot of this final list."
}], "Subsection",
 CellChangeTimes->{{3.6319903895122013`*^9, 3.6319903899041777`*^9}, {
  3.631997139136195*^9, 3.6319971426297894`*^9}, {3.631997181599642*^9, 
  3.631997247259026*^9}},ExpressionUUID->"d96f944a-9505-44d3-9df8-\
bba3b41a9c5e"],

Cell[TextData[{
 "2. Use the ",
 StyleBox["?", "Input",
  FontSize->18],
 " operator to learn about the commands ",
 StyleBox["First", "Input",
  FontSize->16],
 " and ",
 StyleBox["Rest", "Input",
  FontSize->18],
 "."
}], "Subsection",
 CellChangeTimes->{{3.461414013079324*^9, 3.461414014943383*^9}, {
  3.4744866015987577`*^9, 3.474486628243909*^9}, {3.505491607614393*^9, 
  3.50549161560664*^9}, {3.631990397520669*^9, 3.631990402231491*^9}, {
  3.631997281061058*^9, 
  3.6319973183026733`*^9}},ExpressionUUID->"63ad0855-9f4d-49e6-b46e-\
291f5c89892e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Table command, Part 2", "Section",
 CellChangeTimes->{{3.63069169173147*^9, 3.630691705595393*^9}, {
   3.630698654273015*^9, 3.630698658778281*^9}, {3.6307166987023067`*^9, 
   3.630716706077969*^9}, {3.630718280838212*^9, 3.630718282694242*^9}, 
   3.63122733864625*^9},ExpressionUUID->"b0daa3fe-e7e5-4c4b-8f6b-\
b4e0ae627d46"],

Cell[CellGroupData[{

Cell["More Variables", "Subsection",
 CellChangeTimes->{{3.6312272983907824`*^9, 
  3.63122730200683*^9}},ExpressionUUID->"156fa89b-49c4-44eb-95aa-\
28f7101c9506"],

Cell[TextData[{
 "The ",
 StyleBox["Table", "Input"],
 " command can also create a list with two or more variables changing at a \
time.  Simply put two variable ranges as inputs.  In the following example, \
we consider all values of ",
 StyleBox["x", "Input"],
 " from ",
 StyleBox["1", "Input"],
 " to ",
 StyleBox["3", "Input"],
 " and all values of ",
 StyleBox["y", "Input"],
 " from ",
 StyleBox["1", "Input"],
 " to ",
 StyleBox["3", "Input"],
 " and multiply them together (because that's what the function ",
 StyleBox["x*y", "Input"],
 " says to do)."
}], "Text",
 CellChangeTimes->{{3.474484913427264*^9, 3.474484943855158*^9}, {
   3.4744850014870358`*^9, 3.474485189041254*^9}, 
   3.630696765961727*^9},ExpressionUUID->"9ba106f5-a76c-4bec-8f22-\
c6bc13df942c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "*", "y"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4744850984654903`*^9, 3.474485112386931*^9}, {
  3.474486795853799*^9, 
  3.474486822385702*^9}},ExpressionUUID->"dda4c85e-bbc5-4cb3-9048-\
ffbad1b70f32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474485113450313*^9},ExpressionUUID->"4cc40fe4-1422-4834-927b-\
33c24f6b6238"]
}, Open  ]],

Cell["\<\
It is often a good idea to give the list of points you want to plot a \
descriptive name first.\
\>", "Text",
 CellChangeTimes->{3.6307173013614397`*^9, 
  3.7164410069316664`*^9},ExpressionUUID->"b4d0c401-99bc-4293-a015-\
d38b05c847b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["More Complicated Functions", "Subsection",
 CellChangeTimes->{{3.631227269135385*^9, 
  3.6312272947662573`*^9}},ExpressionUUID->"b49fc5a3-5f31-417a-af6d-\
d5d30b586499"],

Cell[TextData[{
 "The Table command is much more powerful than simply creating lists of \
numbers.  For instance, you can create lists of anything in the language of \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.631994237031896*^9, 3.6319943073274937`*^9}, {
   3.631994469744708*^9, 3.6319945119938927`*^9}, 3.6319945620534773`*^9, {
   3.631994640488162*^9, 
   3.631994642824194*^9}},ExpressionUUID->"e6afcabc-6873-4db8-b5a2-\
bb6db297a9bd"],

Cell["Graphics objects:", "Text",
 CellChangeTimes->{{3.631994647232417*^9, 
  3.631994651456992*^9}},ExpressionUUID->"bf0b2813-9f58-4a5e-8607-\
6a6a8b3d617e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"x", "^", "n"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631994308538782*^9, 
  3.631994344538292*^9}},ExpressionUUID->"0bd5e9ba-f291-4cc1-821f-\
77ef74565a31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQrWcv9ur////7GcDgg/2XxdZrjOMR/F0ciXnp+/7B
+fVnr70+mPgXzn+5VFLcXOYPnK9134OT/+4vOH+J8OIvN5t+wvmHo0/17rf/
AefLzJdRmPHwG5zv7RxdebnzK5wv/zutQdPzC5yvu25uQ9HbT3D+g5KFetdW
fITzM+dMXDwn6wOcH1EXqbxG6R2cr/FaMzpk3ms4P9svoPXR4xdwflSxv62Z
2TM4f/L+FwH7tz2G8+2ZboTpMT6E87NuHCpY+vkOnG8zs1FiV8V1OD/j7sfb
keKX4Hz/BzprT6icgvPN9s++/qplH5xv+SE2+V7yEjhfu/k914HSxfYw/vrj
71bWR+yH8/d6nrKwOnQSzn+9alGmX8QlOH/uWr3ZX7Zeh/P3JLaJGmy/A+dX
icy86i/0EM4/c+GKy6VZj+H8wtPmav1iz+D8JeddRNNOvIDze9ZsX8Hu8xrO
Z5x8xfMw6zs4X3zl6uNLPD7A+deWNyizdnyE86NXa7UVPfoE59vMZrc+qvoF
zn/cv/ObSstXOH+Lcv1rxTvf4PwHi8uNWGR/wPmXNFwbPlf8hPPlZ7kqnNj7
C86ftiryp+Wf33D+5f1ON3eE/oXzsw/GccvO+Afn+zTsquLz+Q/nQ/MLnA8A
ZC0k0Q==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 2.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxF1P8v1HEcwHFEilZbhSzmazrKrWm+nC+75ku5wkkqXB13ytdV0jds5eTL
tCm7GcOR6nMnXw7ZlLrdOV9mJ7Tane6oI9xm+Cwcx9z5ctWW1/uH5x7/wdOB
eSfqppGBgUH43/5JJFvO6/V68Y7RaceLtTpkTrmPy8oqUoLHMWdwZEJl3Y9h
BZKtJgxVtSE1mB//dDxSsIdxO7lrG8z9Isd7GFvgHM/ayttmE3T7Fbr3wLgO
5B7CNGNPtWAfbfC5mLwO2tTZ2FdOrYEXgmjZsmeroN1GEsuVogHdW2tZmb+X
wcn7r4nyBjWYWsPGatKWwJgnsU58xwWQgLvSol/iYHpEZOG0ahaMu0cN8PKa
AcvEs5HiDyqQbDR6hWg4BaaN9mbwVpSgf1XeEUGWAkwZV/+MtZKC1MmTLQPO
g6CXmKOYL+gCSUvXEycSueCJ/EWz7gcYecc2yUJjbowYFFEGfXx7P4N405vU
iBgpWNtC5GjeK0Aho8jiVKcSzDlc9Z16cAoc/jYSLK1WgXeHvF1KLWdA7tdg
i6SBWbCE39lgGoaDhmUjlD6TBdCqsVnCDV0C5W9ZTibFapDW7FaUOb0M+nNM
/fqPaUBV6ac154JVsMMpF3dQroGT2CMPY9t1UEoIYa1kaUG76hD7AZEOrGiK
1ZI2N0CZOHDs4+UtML2Hbm5buQ0y68YqhLXIuMfRjtcwZCjpPInTinRu90y2
7kcqX+3rs1hGhrEEOfvD9GAQ3XN360Wkr/87dvhVJGGd11DCRBpnsOVm2UhR
fIqHaT2yI0Alqm9G8o/SKWfbkdWKSwmFQuRDKvnFLhnylrvAGhtF3jD35AVO
IKMkbsK8OSSFxzvnsIg8k28v69YgvRkceoIO+f9b4B9xK6Yh
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {-1.999999918367347, 1.999999918367347}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1mHc01n3cx5EtLslIoYuQSOpONp9fSIjKzEr2SDIjQkYZJVIyLldGLit7
layvvSV7ZJWsRERu+3ru55zn+ev1x/vf1znvc178Vi66tlQUFBRslBQU/8tz
wPmTTCYjp4CzA2QyDtO/ezp8e4eMGOINxtb/4jDfNzLC63/J6INrgOfiEg5r
XTKxmlsiI2X7HpvRYRxmkZAy1jVMRmyW9y91FeKwmDWRzsRCMiKGpcbt38Fh
G+nyeRfvkJF16qBRdD0LVklved++9gCVUISM349gxh53Dy3VW+4jbbWSkyY7
jNhiBjeXNM8eKhWW1PAppsdEp9QZcBM7aO5Td6jEC1qMdDR9YzR4G32n+J38
3JAaazTteIFgCwX7O+jxWVBhPCk8+IRvm8iTT+mVvRkFdk3F1Kc/4i+andoy
v3+wByd37QLPaGyg+Ga8llTFNogXvA10X/6DDjwqPGlsNmHaM+3cUPYaGvXi
rav2XwdHYkw68e4q0jyIzyYPr4JRgPGpPIEVJD9fpCdi+QtEls6Y6icvIVuT
T1WKQ/PgdP3m0+8zC+iiITld1GwGTDxuKEpJzaErkq7DXYOT8Bot3EQfZpDO
0Ygccc0RAKoRw3OU39AW+3hUMFsfzJ02X2D9dxq1hg/8pN/vhSjtHz7rv6bR
Kc9uVuJ8L0wmrBIrRqaRf3Fd5UJ1LwRIMMwoF02jkpa80BMOvVBtJudy6840
EjJNOpir+wKe92VxlI+mkL8RaUJ06zPcHWlwzVgfR7cmtdJSL3SAc79l46eJ
cbSrvmdPw9gBrp8pOD+3jqOM69+lwr+3g3eTUtVm0jg6LKa7PP+6HZ4UVdKo
q44jPpH6atxWGySHlxB+xn5FxhfHZylaWqFf5l2ThNQYEouitXR82AxDFy9z
qeLHUIRxxLlo/WYYOzftaMQ4hn4jZer+880wLciHC5ocRW23jdvKFptghZVg
3Bc6ihonOEqnzZqAfjFmxXN4BHWtdLKNqTeCQmLQscqHw0jW4OyurnQ9aJtE
x0taDyNx9eTTPVz1YH7iLWeh9jDqfT+u5rBVB4/fVrCTBIbRaVR7e+1THTSk
/WaN6hpCRwSPLZsr1cHV97cZrPBDKL8GBG8k1oJulewOQ9sAsjpPuzSxXwnW
fld9npQMIDkq2n/ZWirBU9Fg64A4gNxKkxeCoirhDXLdXHcbQLulBD9mfCWM
NGb9mTgxgCLFa+y/XvkEt7s4lopd+lEMVZ6mLvEjOEysfTXm6kOykhdU8jzL
oNRlnEbtUB9STyPJmF8tgwPKVol/fveihmzvGOXjZRArTAxhbO1FW6EKzu/q
SqHORU2syqsX3Qu83F2LK4VjVEm+PENfkLu9jMTdj8XwUjv8n9ozPWiVqewv
p3EBCLvfDo2j7EHfAoMqjjIVQHXcP2P3Rz+jbFEW5Qc1+bAwNR50MuIzquKx
zbE7lQ+Y+4XewIVutOrL0E61kQurcWMuKlldKO7kWS18dg7cmD6b3ybYgfoZ
Ri1XTTNAy+a0BWy3I78HhxzpOTJAc4H/6IfudnSEq2Uu7jMJVFc5fdK92tHO
7lE1LhUSyFBQXgloa0P9Wn2vMy6kgwB+cPzivVaUwTjqtCWYBidJPdHvsVZE
NRg67j2bCjwiHcr8HK1IY7Cr0TkzFbjOo2yW2hZE9ObfrD6TCoexHM9FXAt6
ETrW3+uUDH/v+B9OKW1Czsu8PCttBPgz4404wptQFAR+qTIiwKq9u3ukWRMK
32dz91pMhJ8u9iM+NE1op7rdr4Q5ESYf65D0bzWiZQ2/oiuW8dCWIqTAuFuP
cMS/L0ckY0EKJQ3/fFKLLJXd71mceAHHD1MvJl+sRZh3iBxvUCTsG93b0f1e
g1pbuo57LzyHpj8KvFVQg/rK6dioqp+BnvCk1fOdKjTZz/fV0yscXF/gV8Rc
P6F6XN9wt8wT0B8LJ0/xfUKyv23aTStCQPr0GmtsdwUyXpToDpUNgYO6+ot7
ohUoXvw+UxkWDJEbVj5dsx8Q3eZzKyerQMgxzaB2Ni1D9syJm4Q5H4jMZubk
ZyxDYfwNeGNuH3D9++D0YEUp2r9r6qJz4yHIRKtpKnKWou9vJ31Wm7ygpWE+
mrm3GEWGnFZdGPKA97ibafWPi5G6cl+M9ykPeGFWUfLgXDHSl1o+dNnDHfQ3
wwcnnhchx1oPg2AeN2jR05cye1GA/iWGmvqLOcOLZUHjpp/5KNllSlFpywn0
w/4+Oquej5bzjjl6dN6Fmcq4+j2qPBRgf5Yg99QBKARGtd4+zEF3x0fsFNRs
oLUqx4VmKBtdob70MkXNGqIMfF85X8xGLXFuVN7aVsATcWJEcSUTVe4+rw++
bwGyq7etJ61JaObZc/0Te8Zwr5K06N2Ujswl1NQZ7hlB8pMllyNC6Qi/H6Z5
Z8EQDnH7+KnOpaEQ9jRfFVp9kJpBVJNqaUjQ/GF2b5YuOOTTRnhnpSLm3qEf
rQY6kBgiImbQm4y8bXXZRvO14YDrg3T4q7eIWkXu+yX9a2CVp6JapUdEAh7n
e6yOasDZQfPb/EOJiKfzKoX4uCrEOP5y1I9PQJt/HFQ7ZpVhc9/HK8woHlk5
J2RI01+GOuE30ctjsWipVDWARkIehKoEiHjiaySTsL1SRy8Dz24UZevdfoVy
+TsTedgvwe8ZxfJQvhikevNTwDGdfyBrNS7EA0UjWvVwecfHEuDKXUIcvfwC
9coOL39DoiCn3F0OTc/Q0oM77EnWwkDttPA5Qy0c6ezhC2PvCsDn14cWmNqf
InqCtN/bHF5IqOajdL8Wgui+pAS/UuUCq1nZ4yPdgSiV4OtGn3kEbvG8t/NL
9UPp69ExB0kM8NN5OkE9wxvJfcUdWXlICQGIs5P9vTtiGllsqG3+qyQgQNip
v+2EWBL2GDXt55U0mmnvmNhbomwNzyz5lT6lurRu5s5GbeRl10wRVZirpJ5O
rssUkwQ2m7jteGcfpSfv7OYr/jWCkZRK5qOPGpVOFKjhVN3tYCZ6X9LJf0rJ
l8Z50EDSFW63xIwZOq4qzZVKpUdIPADhRwURhsx7SnpWFG41or4gXq+5nGdL
A3WsHUprQo9hxzndrkiHBeKmNEJfsQbDXprriIktO3R9OOd8NuoJvOGnsjN3
OA5UUUf1W5jCYOb4oftrCXiQsd2Ss4iIAA0XJd4NC0FwUZjg36GNhAPmUkw6
UgQyjzbQxz6JAvKmxUjlcXG4/6D/X86glyDMIegOtBeApFUxWXTwCmalLc/+
iJQCqBDt81eMBXLd++lMgiyMnXrbrOn3BpR+s/YwjCkA625Q3o/teEh4yy0+
snkZcu02UoplEsE9z3t3e1oF1PrsXgd4E2CS+cfc0swV8M+55nvsLxE82ubZ
MUlNOMZR6zx7MRkS+R/fehekBWWB5y1L3FPAoFvw48D8dfibyygovJUKl6O6
5/TJOiAW8pux7kE6THcl5jLm3gIz+aP0+QIkaCF9q9w1NIbIdSkaQg8JTq4f
Lws9Ygor1gFkjzOZIL1uaXO3xBxKVJk3Tk9kw4M6vHmZjjXM7J1fY3+WAxD6
7AW7lQ2wl+uvUEq/BxW65eJ6H1t4IERc+PoyF3bliKNUyB5kaMUmolULQNwx
nYRPuweOtdfH/NYKoJu+/9HCkjMQvNyHHZMLIct69+q+ogsErI8v8PsVQZhQ
0hTtnitMWQvO7A4WwzXX9+yz3zzgnWrpcGFEGZi8Pu41YuYLlfgrhsLTZUBW
eMhAUngE/XtDA0SpclBV1eXixPsBdflOb8RMOZCcHr1bXvMHWyHlLmvFj/CN
RUe+fDoQRGh767jWPkFDGP55N91TwL5bQdTVSnisUSIyH/sUjGs3aqiTK4FZ
LvjQwKlQeOZ1rGpNswpeZ427nr4aBr/m7pR3kqpBp+yRaHl6BBS2ruQ8NkLw
PNaK+15ZFEyaM/tL5CBQVzoTqKkXDSybYjenthGwQFUXWo8GqVeSj1K062Dw
Xerzj8SXEFvnxk9eqYPE0p8yq0sxoMP7y7n2QgM070fxhRXFwoLDo1ucJg0w
wqgdmH/4DQSWMV6+H9wAbo2r+imOb6Do2hl2vv4GEJdeNJwVigMWX7tKf89G
aBNJrtnJioeOoWlaxY9NkCp5jPNaHwGsBFxXY6eaYGn7fKaIfBJsO5NHf9E1
w8e7Ejm9pCQQoeHLJxo1w/j1CbpQXyKEXTTV29tuBh3+/dMPJZJB9eVgSpVC
Kzh7Z27XTaVCjUaHjFxDO0jHcX7lqCbByiXJxvXldvjzc1/zA1UG8Akka+dz
d0Dg51iZzxoZELDjZoV36wBu5d5Im9EMwHK5I2nxnaD89Qm32EEmNB12nOrz
7wLbwaHGk+Y50NFDF+ok2wNrC0JmWd4FsFPlxipk2wNSx8hB0t0FIJr9lTD5
sgduDoUJwalCeB5YWKiz0ANU5KzZsi+FkJmQ+yvp2hcQDzoi9DahCBw09DiD
d76AywKlriF1CSy9f+d43agPYtUquuPpy2FzzIGq2bkPsiKFTX/JlgMFk0SS
fEgfuDJwBPg6lQOnU1WXSEEfSGS5P1HpKQdlsQGJQ9T9oONx/nV44gdIyKXZ
/FjYDyeuf6iYlKkA1TyHYH66QZhmXjpV9a4K3uafS9ooHwZOUz9FQkw93D98
LGK7fRi6Cr1CdArrQcmJ0vtgYhjKbjYP8nfXw6TIgC497Qjwet9JYWZoADzJ
h5HHcARMDMNajvznAYnQ5KOyOQJe5hk2XQ8bIS/MxOiV1BhIvDk+zejTDNWW
oRznP45DNnGxP6+pHUZZJ/pnu8ZhtDlYrGSpHTbRxVdJ38dheB+2Btg64Dzf
NxY6lgmQJwivuVt2QPqYPP2kzQSkPCFZsFJ0wjO9tZ3nbJPw7aS1VK9yFxhd
MZued54CLdel6ruTn8GXPXHwBts3MFNgTzqQ6oOuLwOqfYQZeFW35v+CZgTc
OqWFoznnwF610ftMwCSQelQ57NoWQKlKijfwwgxE5n3MptNagp/nuWMoNeaB
8vWARiPNCkS480r2iP4CrpzcVpL6Kpyw2rd4/WoVhrICT9GEr8G1uM/K0ZfW
wTRXNNT9+x+QX7eMpdXcBIUkOvlmoQ34dEVFscV8+7/f+bQp+OQvEDxnHAV/
70HZqcdL/OObUDtqtJmgT4FNp3v/Q827BfGPbiSlilFhfSJXAtcfbkP83s+0
ZjVq7CThCr6tZgeEf+jUdBjRYnHvjbdl93aBinh1ztaHHutHyqMVBvsQubmZ
q/qDEXOqN2fiTTgALyajCAaMGbNKGY2rfnsA4cUf+Ts1mTETf30Bs/QDuOlM
UxZlwIypy2rKJhUcwJ6QU8sJJ2ZMsPiSPXfzAbQn3XmnHceMjacebuT4cwAq
ib+kWJeZMa3ASl8WLTIUfo3rYyWyYCrml2gLdMhgIPMp+0gWCyanUBSjfeu/
/X37Q/YSFkxkKyM70ooMIV/KaPFtLBi1a8wQow8Z0vBlo9c3WLCaOw7/0GWS
oabP0IxJG4eVKc7UZOaSIf+ZSa+YEQ7LO2GuoVZMBj0jLey6NQ4jDOtZPK0m
Q5XkDlOiDw7zugFRh/rJQPknwEQtE4c5i1dyp4+QIe7WerJXMQ6zYbqUoTxJ
huk+g4nsahym2ypaHbRIhhjG2atH+3GYRkbGVf7fZNhqOeJ5bRKHYSH4/roN
MnAkniU8XcRh0pZJ5hY7ZJgLvFRZv4HD/q+HwP/3kP8BUgaYYQ==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 3.9999996734693943`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
pFEWZL400A+U64eFHX8u/QrJBZcpFbXQi/8xXfwfE8wFzXNHZaNu9wPNdTcL
hplcWKKmYkn26YfFO9MnOc/kgbRrUt2X7n4oGymu4hvNgwLHZbnRx99BJqWs
ea9CAZQZ+7BKFw1A1Df+rAi+IuhjGeyYbBoAc1r5j7LaRbCBJwIjx/7z51K5
eP2KQJp3lGk30yDU9lnGjPwsgoR+hT1DdwfBUUnURLy5GF5prWy93j8EhjYv
9WneloD+uZsj0zbDQLMnLMflGgkereXFRHsOgyLNp1/P3pEgMGHvLa3wYSCV
ZKq1t5CgaUdRH6l6GLjsCAteVxD4h31nGxlH4OovWQevI2QIihwfi7s7Altq
1pQ7JyvA+WB415X9o6D4ZPrcedsqsNqpO2zPPQp+zJUyv95Xwc3V/bNBh0dh
No7rUmtBFUCr/9+eM6NQ1dJ1b3urCnb5uwsZmY7CV/qjaxp+1RCw08LermAU
liaisuo/1fy343KM73XHIJxT5uYkWz0Ej/5kyzcag6MbLXJzhHrwac3h77o/
BpkJhEtc9+rBIktcltNtDKT9WT2pi+tB6j6vYVzKGDheseubNmyA4lGatNzf
Y+DtyvxEKLMRmlo7VdsjxmHNJUF0r20zFN40kK9IHIfk0lOPByObIW5mWCIn
axy2B52PD9c3w2Oq+f0BleNwznXlipXQN+CX3jF6YW4ciNT9can93+DR26PP
K05PwNSd/MFJsVbgvezzOad3Ao6JrV5Iz20D+6+nDr9lmwKLEYYUBYYueEH5
6aErMAVO1umjhyS6IPBEziCP5BTIiCQocVzsgoJIsQ+ZZ6fgUNCNYBvfLvht
xbmr0XoKNqIr9bxou8GV4c/orqopiL1Rx2i7pwdeaZKinW2nwa0ofTlWqA8S
W1RZzetnoP+FlklSySBwRAZGOrbPwBE2ryOTQ4Pw2nxEwHNgBvQC999U3jkE
Dv+eSX1cngGV7I3jOhpDcFYi/3w/xyw4GYWvDw4PwZCPgPNly1kon+DiVaEd
AQ7C9pAc3RyUUsRilQmj4J9ZlLpbYx74hcfVFwbG4TC/YuiS7jw4SDcaVq6N
AzmI7N1lPA9EjeGnGQwT8NO5wSThyTxIXF39Uag4AQYXvnNDwjxc7r+WnB89
AUemtt893pqHPe5pvRdNJ6GWT81pMnUBrLWuOIn8m4IdQZ0XqmiWACTYe2Rt
5mA7es5khXkJMjNI7Xy+c7CVSuXCd2gJVAkRzDwJc7BGksx6JrUE3uEpZpf7
5mBqzmu/rN4S1AvLSL9Rm4cm5ZPfE1OXQOJhdoq78AKErX6w9rn0A9RYe83u
Ly0Ce1pGXaL6MkhcsUxqG1yG7hR3IRrfFZhD5sSTDOtgmCHu4zC2Cq9MZAPK
Lm+BYuRuhRqRNUjg88o3XKXA+NsvG8Je6/BUrq3OynEnsUDIbV5gYAPIp5rF
qHR2E0cSnhzfxfMbKg5eIN81oSe2i51z//l0EzgfXWdbEmIh8kWc468v3wLe
M+UzmZn7iSHpNzZP//0DFSEFWrr3WIkdqNxXrPMPZp/fmZ1O5iBaVdym5wnb
higZl/QDv7iIJrF9IWXR20DfU0zzgpabaPBcW/BmwjZ8y+Nm3GDlJqqfvng6
MmsbhGe9hH/IchOFc0/e46zZhkPaO4NEHnITBz4yVLGuboOIAod+4jI3UcO9
xJlJgwIKjAnNyz94iCq3T9JmXaOA2B/fPDYqXuIZxZz3mnoUIG4v3FVm4SWK
/U5K9TehQDufgVyGNC9xl937bjonCth1rKVW2vMSy+9YHN+dTIFXB/0L967z
EguUxsuTMygwxXFj2Z+Gj5jJdfuCWi4FBuOu7GFj4yNG9GgZeZdRwJpnovv0
KT7i4yv/VUgHBbhJ3fT1TnxEm6MlnAm9/+Wb49J2fsVHvEt/Mkl5iALp10de
HI/kI16vEy/zmKXAlYJ9YQVlfMQLSUnnBX5QwIEr2N21mY9I9OTvIK9RoCKC
rHV5iI94yjjyttEWBWRm4/YL/+Aj/u/Pg//9ecT/A5R1bfo=
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {-7.999999020408203, 7.999999020408203}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1mnc01/8b/ikUWV8pFVlly8iIyut+N1ChsmcqIlkhJXuLshOy9ybZ+2nv
vffeK5uE9+/zO+f3++e+z3Xuc+5/r8d1zsWi815B7xQBAYHDf+P/bj64uIzH
4xHNsVoKHs+PUzLk8Px7iEcEytKjyyv8OJsfYuzbu3gUwHbHfWKAH9ewoqEz
v4JHHpry3HO/+HGvQqOHWwfwaNOYzfT1K35cwCZny89fePThQFuSvoYPtxN/
J0PoJR654W4GOvrdwJWcfW36tuIErSWY8L19wINzbOtfqXp9jG7WZ9FaV7Dj
lhIv091iOEK3yxVFKCmv4bgnHpFSjR0in75lT+YmJlzC+fidIZe/iNWIiF9w
+DKuRrPZB8EBqrJpS3a/cgHXmXB+Q+r2ARo+iFBzOnMBN76mpdAufIDYZ8cW
vuzQ4g4c/1wc4zpAbA8+fy1vp8XxJdDGHJ4/QIbvCiSqXWlxYavaOSKL+4iX
ekqOd+M8zsx+uz/dfx/NL12d1+imwTFEMzCHTu2hl1a87bMl1LjMn84U4qN7
6OKRdbZwOjUOC5o/HOrfQz8O+iL9wqlxL72y++hb95DO0qGbvh01Lu7Dw2/R
BXtIY/7MTghGjeN8ZLyX9G0PSc8/jyf9SoUT3ixtzRfZQ5ZBOS/qcilwMg80
rXu8dlHZbA8TpyQZjtvCqqvTbRdNYQZTFbxkOLLY71ztjrtI97NQmj4tGa7x
pGWo8eMuOiVQJrg0Q4qTKrl7u+L1LgpLuHqn2JUUhxNk/JcivovYr76Vd6g/
ixNhmrJzWNpB8dqiSE/tDI7pn74T1+MdhOsokf6bToRb7XubUPJgBx0Uq06O
/iDCFWUbNMpgO4guI+B2tyMR7rm+IbWp0A6KzGin2FIkwjl1mcTkXN1BG3fC
2IiPT+Omky0r72xto5YSXK+ZwmlckpILwdPwbZQge8mFgewU7kZWpJPF2hZa
YRCQdFLGw6NyZapXi1vo5x5b9L4QHnRaKaLkZrZQVXvXshcNHkKX7Us5h7YQ
rYPbVXzHCRBxaO+N124hnksVWtyyJzAczWgsE7GFbL7Z51g9PgaPgGjV6zL/
3SUiSb6q/oNJy1i+/pRNpGVxU9+uYh8cRD4+GovfRIq9841N8fvAsPdIZzZq
E0WlfMu/4bUPalYbP7aCNlGgzPhfMaV96LKGY0rnTfTPZbdFc2UPqh3GWqTV
N9FTCwbvhqt7kOB5+V0x6SZ62Ti0NBG4A/cfr7lUEm0iv/ZbIvM2OzBJWhXR
gN9Am1x0toS6O8DwzaCzb3cDzWxp1n0S2oEfPoW3tqY2kNRk77FG3zZ4BCqT
8JRsIGHxYzU8wza8iwiIjzDcQA9IDqR1Szdh5+wTr1t6G+hbEUUyU8ImOH08
9b775Qb6F7S9ueW9CcFPP9w+q7yBerkXKce1N6GaQLnrA2ygWJUflbWnN+GK
3iX8E9oNRPtZbrVefgN+aGL5W7Z/0JdPHwxMjtYgQ/iXE6f5H9Tb2mr2tmcN
qimYZbX1/6CuPrHob2lrsI4IZ5qe/0EfDbMP5dXXQOp6HXUs2x9Eb3nVvado
FfZWZYyfdawjUk+nTn/HFVBzUL+WwbqORBuu+d3gWYJzlWK1YZfWUdDiJ5oI
0iWoILyk50W5jvJ+nxfhXVwENvf+JP3DNXSZTuokO3ERtr4pcrN0r6Go0D3e
J6yL4P1TTjDYeQ3V99hYJbMsQGXePXCaXEXyrTU8H8Tm4MMe86Rp/yr66bMZ
vnxlDtjFCJxftK4iU6qYZafjWfAprai+XbSKAvS020hrZkGj+o7Urt8qihRj
evb12SzsdIjIGcIqsjVWDxQynQHOFS5NpagVRKZOcOl71RTku3V/N/y+gkZo
4li/J07BfUbbVifPFSSvUqOa5zUFWvKtEpkWKyghNG5QXWEK/AtNmUmkV5BS
8qoa39wk/HXNnSv8s4xC7b4Gz1NPQjODhBn9vWWkG2xgV4kfBdWCuRRB0WV0
8kKCKbljFGaf+U5J8ywj02zf7KboUThxmVCwvLCMrKukBqpwo3BzyVmkbWkJ
qeft1X12H4Gw/PpDh8AlNCjau913eRiMnj53n55ZRElnnwocGA/AyROBXp6h
RZSXJLRZ9nAAAqWpr31sX0Rh996F5TMMQAmus/JM8SK6emF7615bP5wVen7E
67uIiL8QjFUJ9EMS3fMPVmKLaMX7+eAtwj6Ynnz2mtxnAXWIGto213fDpzH+
bGWXBXTO0PZCYUI3kA1T4aOsFlDkAD17t0s3CPZ0RAjqLCAb5QnC79ANTnXP
BlVuLaBhabszd0q7gDHt2bPYqXlkW1KWhi/pBI0PzyRERefR7RRiT8uCNvg2
GPlajHce7bZ83GVxboMyiVX326zzaIpZ+BGdbBswnvVqxyjnUdb3mrDB6VaY
iqh+KT0/h+pF0+azzreCQb2Ii1rwHEp9+YTCwqUZPl1maLDZm0Unvm8FQgMb
INnBcMVudRaN92ZSNug1wOBMEZXj9CxKoLixLSLeALezlNVc22fRV6LQ4e7J
eji+77f0LWkWecy2254Sqgc341PkkSqzKMiC5AbRTC18R4vPUcEMkp6oMN94
Xw1RdgQUS+kzSDLrovYX6WpIEb/URBM7g6jXfUZfMVVDRa70Pf1vM0jAasNw
uKMKFpOTBClezaArVjs9E0JVgPm/odEknUGN54j8ds5UwtKryZ49zWlkc3pX
L7msFHauHvgxy0+jnAqOQ13bUjgZppJ9IjWN5MoIT77fLgVaZaiNFJhGD8hA
SLakBLDHUXkPiaeR/tMftpSoGIIEtX4EZk2hgnjf5jdjhQCnBlX4CKdQ1446
T+m7PJjn0F6k3p9EagznIpXE88BXbtZ6e3USHZGRKz0kzYPx0I2IosFJ1Kp+
a/96Wi448JPO3M+eRFLSIrMTf3KgTOv2e9WXkyicjyFn5utveONSSXBbeRIV
5AT1/n75G8hTpAIZZP77/5R6rUP4N2htK+RPiU6idY0Yy8OJbPjnZfTPiHIS
BVna0p+IZ4OlqTgVoe0EukAsftB7kAm1xZI36/Un0J9ULjnajEygJVZQ/qYw
gTJzbhouvMyE3HDD8AvcE+j2liqRVFMGbDWGc3APjSOmmidknXHp8P7aCSje
Gkc5loI2H8xSwXCw2ixxexTNCgseb5olgknP65risVF0cVxzVUYgEczaCS62
N4wijTRyO7GNBLCqxUr3wkfR60IRonrzBHDLLiF+9HAUveOh8wuzjYcoz5yw
5aARhF3w+miYGguxrvJrJw4jqJnDMP6LeSwkOGzA+XcjKNRUaoTrdiykW/LN
3ZEYQaeqjK8ctsZA0as0fp+5YWQflJyutxkNPWJxtfyiw+hR/MX2qI4I6Be6
R/eQeRgF2gdWFLyPgGG+yXdqZMMov5FjsYI6AiavM1I5jw+hhdtsUT+Vw2Gd
Oky922MIXay9MCu7/BPOLgWsWw4Mor7qpTh5LATu/nS+VPJ5AHXqrsQ+8wgE
OQ2/EGHdAbQpfzeu9H4gaNNHXvwlN4AqU3YFpvAB4BhZRJvAOoC+fniarGgX
ANWxf6h9W/tRxxb1Uba9P0invSDVYe5HTyfdpxTu+4CakZHnKFk/ii/485m1
yxsMeK3PqO72IVk7rcI7r73ha1YQsWxzH1rgKWa55/4NWnNaCEUt+5DuriKh
wqgXKJSKH5I29iKnF4Sx+rUeoGsnbe2W04sUV9hGU/Q9wFJC+eAkohfx1BOW
U5B5wA9ktrdt3otOP7YhFlVyh8Ga5K0x+l4kIcuhgHZd4UXrhZXf73sQ14bL
+m8jZzD1uWbIq9GDxtc+s5IyOYPDU8GlpIc9aL1P6712jxPEdMouhF/uQQ9H
Uj0OMSeY7nWdca/pRvlzy/xWDxzAYGxzRJ2uG1VunjEn5LCB3PejxFKnu1Ec
6/FMaq41nBA28N/804WoJi+5d92zhiD2CFeyhi7EqcRIFKDzGSrfS/GUfupC
65VMSZb5n+DSqXAbhv5OJF1ELXwQ+QF0g9wTzlZ3IsnPAtfI732ALHaz9p3M
TlQlJFdsNGcBD2UkWdvcO9Ec34QN4U0LMAv602Qv0ol2v6h4CA6bgb+c580K
rg5E3/SZ9nSjMbBbvPAIJuxAG10+HY3CxlAWfHPYdKgdicW43q6PN4LFiVFn
Jq92lMw7c1fe0xBwFoJdTott6BJlyQtSIwPoDyZhU69sQ1cKzrWvLb4F49KR
z4KhbeiUpPTSqMFbCCXyYJ6WbkPku0o8dab6sBE8/P5BcivKU5dsZgt8Ax6l
v2roHVvRmPazJw1Mb4Bh0o1uR6UVOSxqyD76pQuPuPhRAkkrakxQ6ejp0YGY
UldKEv0W9J3fFxxvvoZnk7yZjdeb0Uuxp3JvXbVA9g3HK/jbhPi5qorlGzTh
ySLL+YK2JuQ4LJw3S6kJDzcuWsd/akJHhZhLT4o6iBEQSjo0NqJcrXUZVxJV
EHH7t78T0YhY739//UpfBW6e3UszMm9EMQY71h5NynCDeoVa/Uojeio+/sHx
pxKwMveNChk3INOf1xTmtBWAKaHDLw3XgJq5QnObB+SBgbP5PsuFBoT34sqO
UpQHOgGUQllRj8IIDdrmFZ8DOS7VcomqHtlrd+cHrcgCaW08x6vZOoRjW/Bb
I5UFkkdRw/1FdaisDnfJ+oYMEDz/jqt9XYc0BbeO+lwfw+5Le/Lo3FoEw/+C
zIykYGvGCl3wrEXtNpdxHL8lYeOthYW3Vi36LtOlZvbvISy/fztoTVyLNLlm
kXHkAxh3lE9QUq1Baa8aR//R3oOR07KqLTw1SG2LQe6mPQ4Gv0iR3SeoQQ+e
qug2dwP0+N0x40+tRptvRzs2wiSgMZrtLtm/KpQY8GW3xU0c6q4x/3HqqEJE
PhHlzAFiUJ18JW4/vgqpr+2TqibcgvJfVGfnZKsQkwkKmR4XgRIhslJNliq0
wDg6vEssAkWFRKbdu5VIUyMmUV9IGHLQ3x4UVYniyU9pT8bchF8PdjxEP1Si
rQjWidRJQchoWBfPlK5EPUsblArsgiAX3QAiUwgRtN5V8nDnB1EUPrDsVoEk
Eg0ECqy54Qo50VKUUAWi/8J55UiXC47VjA8VpssRw+e/5VMqnFC7dfdqKZQj
dbeY3R5ldkiBRL7362Wo+01bnPtrNvD2psBdiyxDi+NFd1k+XgdF9nGdb4el
KP4fZ6NeLiuIfpCyhNRSRHi+uaRwjAWuVGa5b6uWoneZOhGSVCwwre6Yoplf
gqhk668MUTKBmQ/zOo9ZMQqhb5Vq9b0MSsOe+AnGYvRO5ROwP70Etzg2qYPa
ilDZp1tHppfp4KSySuiIuwiJqR9XhXXTwjQFt2T2UCHKYhm7s4DOQ51GoMob
z0L0cNRLc7eQBrx3dKxb5wrQ6YGXPMIN1GB2r+WrU1ABmjwYv5VRSgWKvkIR
wg8KEEm5oL7YEQVc4SRCETH5yPVbMztRPhmcWBp3Pn+Wj2QZdwZFeElhuqp3
iugkD8nduXQpKO8MpGomEplo5iH8u/79jj0i8E6huMhClof+V22o+uvXaTDb
/cjRV5SLGAXXqyqsToGYn9QTiYu5iID9U7aHEAEwjGZpbtbmINwrOrZY2RMM
z0lnkvghB/3IfWM1LHuE1Vcv+FF0/UZnczmFs34eYGlUz2OrHH+j4Jn10K+z
e5iPVlHOR77fiEbrk5O/1C6mtOfZN/YtG9EXzVc1yG5hYg825wNuZ6OVcFkl
jT8b2C3m3I1v3b+Qmf9I3m+ZP1i9opKolk8WUiXLf04Zsoz5rF1Xr13ORP3X
YttMLRYxpS+7tryPMlF7RSZ56vt5jIGlPiooMQOh2tfn5H1msZmS4KqjUxmI
xaEj+FTzNJam9Hb2zat09CYwSOb19SnMYv3WmbbyNDRDlccjKDqBEbAOyUZ+
TkXOFz0UWrKHsIbS1PfE/SnoDuFM9pbYAOarbBNoIpSCZmSNu6v/9GLKf57k
9/kno4nSubTJ7m6MwYt+UGI9CTm3c7URTHZiM6yrh4kySei8h2J/O1c7llZW
dpUyNRHd5hlJ7xxvxixUfHCfSBJRGgHnv7bhBkx844XuuG4CUt9LmM64XIcZ
lyQsWdXGI7ru8+k28dVYlNvK+/+x/ac/PDO5ol+JdT69uZfmHodsRYIqyMvK
sNOXre0ezseixvsy7OlUxZjoDDo1LhWL8lf1160q8zGDTBIvq+QY1AVL6bSN
OViYlRzV/87GoKRPQhlazNnYT1dOHuWuKKS+fW65ySMdO6EruOUZGIlCKgi8
DlSSMZ2MBw9LFSNQ3sB9VpWkeKwB1/V8nTYcPb3me/6tYQzG26f9gqX/J0qv
KVaRuhmOBbxbfacUEooUX3bIr8gHY3vH1p++qIWgM2Qyn21YAjHNwDOuJZeD
EeMgH50Akw9Wyf7Db204CPU133oRRfcFYytljWCO+I5a6a1brlG4YF+fZaco
vghE93sNNGdrbbE/MxL5HowB6NjzMRvNgSWWvBHs+gH5oTcJh/wDBO8xs8s5
EUP3fFDlxcpiOS197Pb9tnyo/YpMygh9VJReYkRGi+2JUp6ITcvJOeimMtb+
/fTiuSZ3JDERbrvhIIOFljESWsi4IqkMKh+2FRymMyd+ZbDNCd3N1Jz0thLC
VBnS9O1i7FCYmJ1IgcN1bNlkMvRRohXSHqGb+0Z7HnNAF1to0yzQ8faZnJiY
YwlW1rDDqhdGyJbjal/D1SmJx3UkLzXevkb0PeoGU3oFEpWxbRQtNXKoM2el
7NTOW4lH8fjKJB5hOKJiac0TJpJwi9NfKNpXgzjCxF18YYgEfZYU1UMLffhg
GiO5ctQuYUNs0qcsbAZP0Z/bun0bEvO5ovFe/B8h9g4PwYuQs5iiDoF5ObcN
6JLoURhHMmCV1M3YJpsjTH6QevyvmBcLnnjsEUjtAiqbpNxzeHGstYDPhNfX
DU6OzFrXmiWxU77nlerPfYGBj0Z9obfkMTG9g9uvvLwgyPFMU+aOOvb+7hjL
IYk3xF2Zfljcq4Mlna8+G+TmC9oqNEeenw0x0489+xed/eHc+NUHj69aYKRT
kiszKADcU/Pzje98xhJki8azTwJBZaOJSbbREYMi7m57iSBgs4nn9Ldzw4av
RdY9sfsBjCvEndqnv2If/aiK6UqDwSvx8O8bGX+M+p9zxuzfEKglSosz4gnC
0vV3on+L/YTGU3j6zJxQTKpb/7uDVRhMSL0hPNyKxKYlhjxkCsLhfOjkghs+
FrNPlbG5tBsBuctlFhIfE7FLFypM5oSiINbl1r2lN6lYnpPA6xyLaKC9htfF
hjIxzk/yaUgtBnw+4vhyTX9ju+lk19kPYqCT25LSEcvDqqdqIr1DYqEmgoro
nE4h5k9nT7ctGgfNs/MHoRMlmLacaIB6fxwIPrnhl1BegfG4/iGr/BgPl2JL
/M2dqzCtO+fPZrImwP2nTbV91LWY97YocVhHAmATD5Yi5uqx8nSNU1/sEkFB
CHxdiJqxdV0H/AeuJDi+JiphaNGGMTHEHb3qTwKnarcy/rBO7Hlv3V8512Tg
oyGYaE7uxnIeUuxwjKVAOUPRz0zFAWzmSGCT9msqPAopifTeH8Jo85XWCW+l
wTOB4ePbPaPYQ5PPK+szafARV/y2YGkC+8gWsTjinw61vv33z0ZPYUljaK5R
IgNEKF46Fr6bwfp/zEznL2dAQI1iqbvKHCZGwjPm9zAL9jcKza5HLmHvKp4O
221mwaBAnPurwxUs7JPFwLuoX6B2e70z0Gkd06eTMUxnywbuEAbKutANzGF7
dJHFLhsu9JeF+J3ZwoI7TN+GdmfD4qKjQZjPNpaVTjBPyfUbliJLpkd4drEJ
3esz//p+/8ddTWq7eQfYARS8tuDNgdU2jgs9sYcYNcOjyUWXHFg7R320lXaE
4XqNxvr4c+HcLTR59RsBqGUfa8p65ELR1l/ex+WEYO7tN1w9mguxPO8e1eBP
QdzD3IFfXnmg5faEda2QGEqYJVXYJ//L5U/eljTwnYGeo/7eCNF8YB2l6JMq
OgtE+YddXjP5wNBYUxlPTA4MAd7PCW4XQH69gEFlMwUImzB2fPIvgF8D0xg+
gQr02O636koUwqPma/IVbf8DB8LeJ8PfC6HYjJjwyygNBI/pNT1fLgTle2Hh
Qvvnof6HV71ESBHQUKey/JS/CJwkXZV0m8XwK+6lpmMCPeCmdcBXugSqvj73
fsRwFdQrdsqJokpAu5/v4UAcI3z9dKl080kp5MZYLM2vM0OcQpq4QWwpOF/k
+uLQxAKlfHeLxvdL4QHZiiwugxVW51/mtySUQUvF6SDqb9eBqGZT6P6/MthM
6Kr/8oUNrka75hTJl0OL4k+3Q292eKqa/CvxpByej01Np+Vywq+G9VRHNQR/
g69tPvh0A8a1Kez5UxG8FPx0TTyNDyj3eJ5P/EVAg64+cVv4jxcDhW2j5Sqh
3T/yiikIQlClOQt+vRJk1QKSd2mEgZec8JwqXRXcax/p2OoVhhpV/50sqAI5
D9+RVxEisLWe1aDtXwX0zm3/279zC+SvrppUCFbDtUEbk7XK27BoYKt6UaMa
fK+8sZP/fQec8sjumbpUwylXPad/yXchW4aLlrGnGs6EfjXzT8GA0ka/xN6y
BoKENcWX7e5BUt1ufF9EDaTbJjlXUN0Hif+5+9yoqwHjPt8pjqT7YJwS/2rs
Qi2MCVSK7o49gOb+SRKJwloYcLl8wmQrBTqsZhtBE7UgcPXb3j1eafhrgh9a
PVMHPwZmCi2mpIGTmDEzQq0ONOI3MkHtMXwR0lQ8+lsH7Pdz86WtZYHRcfmu
Ems9zDzRfR8tKwcFzdbsGU/qocvX/taX609h/nXoX83weuiVzO17PP0MHvr3
RZfebYB1ve9UpS3yMDryxuu8XgPsz9mwBz1SgA8cOxZGPg1wEvLx998GBYir
oJGiH2+A57S0Nj7tikCw9mzVxrERfm8Pu3b/U4byx81it6ubgGPOInFoXAPW
RYRrtteaIEno6yFjiCYwskbJZV5uhoyxjMb/KWqBw6G5DrN5M+SMe6YL9r8A
XPplbxLmFpAYcKfSdn8FZiGuFytlWuDTv2rGhY1XEOu6FmNt1QK+dJN91tqv
4ZRWVf5qewuQUF7+3A86UEv+bqLbvhVyasrt2BnewM5B9zvv1FaQ/3xiXhD6
Btjm7u5I9rXCpnN1iDudHniUU5MW87aByc4A/oheH6RNi25Gj7SB3+IftfP3
DKC544yHkXgH+BT/Eb58ygQOS82p2fQ6/rOl59dWE02AO2UkbNy/AxRnlXnM
ZU3hm9OvX/KLHXA5ITL7V+x7SApNXw2X6YSKguW/S6LmUOE7+fvz605oidx8
QxJkDv1uF6yUrTpB2JLMJ2zLHM6YOxJSxXeCm8lyh3ieBRg8VrzoctgJHHgH
vZrHluAEniPa1F3A3hE8RJ5rCaEi5TF32LuATzeBdP3qR2hi4eDZle8C+zAj
As+Dj8B9eAgGqV3gEkTM4ltlBStpce+eqnVDf4H55e9JtrA3bHCqzqQbhti3
mMc57YDgHH/4HdduaFDbd9vOsIOLRqWtnFndQLbfyuRbYg/3eXr5TxP1AHZG
YexgxRFC04n3Cn/1gNSVJPZcZReIH2nx5avrgR89chk8SS6QdS6QI3G4B/gJ
jXbS912gxohRPZC4FxQEzte3RrrCOs+tMmPN/7SETVv7nhs8zDBwYTnTB09Q
lurA2Bd4NspHH8rQB6kdZurj4Aka5Lu5lDf7YE0jhIkm3hPeGzvP/dPqg3Mq
vr6kJl4Qxhv2qD+nD55xeP+wpfoGGxktlN+0+4FZ8IpQgL8v/BsNSCa07IeV
uEUSLxI/IKFQw3326gdHr3rKPns/oDeZNdfL64dJmvZdcTF/kLpx3AtkA+Ax
T6VFJhQAkZl84Tv5A3DW/3+1QU++gyn5Ja+/TQPAco8OR+n9HTAjQquTsQFI
LfIfutH+HcY5exXOkgxCcPZuna5SEDAnWJMxqAwCsXrUyyaDH5AQVmv9YG8Q
eqxZPnzMCQHLv5lvH5ENQWEKO2X/SQhIqoUoyzEOwaP24Px1mVCYv2AoqCo1
BE+9Y+pkF0OBM4BqyTB4COY1brwe5QqDjC8aaoGiw0Bd0Yx73hUBdvMPpEKe
DAPL4lB7OVckyEneEI7QHoa0qMAHey6RsH6KgDrJYxjML5cWtt6KAgGHxIbi
/mHwrPg8JpgeDXmWG6JTn0bA2CBY80ArFspee1wQKBwFau35HpLKBBiiHuuZ
ax0FDsNSA0p8AuwhocDw6VGQT/TkTMQSQYBxivIM5RhsB8h/dUWJED985+z4
mzH4QcgYT9+YBF8VNw+/0YyDdbR7vPVuCiSfelR8j3McdBwWooYlUqH2d5TV
vsQ45JfSBA16pMIJleyOzrtxWL5VtJt1JQ3MW5PWxCvH4cOkjeP443RQk9Sa
XDCZALHyMHKahkz4uJMTFek6Ae3/m2bKupwFgfGkLxR/TgDbklXUrnEWtBIW
DlXUTkDMaX7/rxd+AfOE51IzxSRgaJLtw61s+B4+Mx37ZhIstd3zwmN/gw3t
z75nNFNwtlt1xrosD4xOq0yYM0yBd6bLi6m1/zhgi2bpO/sUzI83Lccw5QN0
eh8N3J6Cu+zJk1xu+UDk7XTtle4U1Fbv5pnKF4DvaQNzs7wpkGdXS2Q+LoT4
LVGKAJVpuJa5bEsXUQpBU9sXc19Ng9KNkBfPh0rBozObuc9wGsKFNgbWL5aB
QRa38GXHabgZ5aaq/b0M+AwZNWOTp2GktqbvfEA5FE0Rp/4+mAYpsVyRuzEI
Wjt7H3aHzYB4xHch5bPVUKClIVaVMAPVxLoXjnmrIXZxgic7awY61CXKR+Wr
4RPBCo1v9Qz8ciC99zCiGpgFCKceL89A1oMj2RKhGvjod8O+SnwWFp43frA0
qQXGpx752YOzYOv8prqAogHODp9LjZ6eBZajle168QbY1guI8F2dhXr6IMGL
+g3QaB/hakwwB27MTlUWqAE+ZObIc3LOgf3nny3cHxuhkXxiLdpqDjzs/iW0
rDaBecstdr+L8xBzosDhSNkGLvhtZxWWeSAN15B/Jd0GgULZY1d55+E48Vdv
kFMb5IVz/si4Nw8EO3a8f7fb4MDoMlGz8TyUmi5QFI23gwP5vymimnlgnF++
x6PTCV/lKiJt3i8ACnQd4XvXDeHONn/v2SxAXT8HsH3rhox8UWVS9wWQ+Eb1
9UlmN7Rd/UUeGrYAOjFcLqxb3UC9Hm2bX7cAJne0C8kdeiDE11l9g34RzATU
lDeieiGh4+EF/cZF8EMXDblIBuBSeGC4ZfciZBTf/hzNMwDf9CdZXEcXofHd
G+4H8gNgcWzLF7OxCJjWLCVt5ADc48mVHr60BIQ5kYsTooMw7sFi8/TdEhDk
qvvjPgzBJexkXJRsGc60Fz3lox4Fb1JZPUnaZeC6vpIfe2cU8L0/VxQZl2EB
+TpIvx2FeSORA7Oby3DMWtPBjUYh/6fx/9I1luECl3qBkvkYKOwOP2BKX4Y8
Wq4l1Ylx8M4oTDkjuwIzsiUdoZuTwM58N2RdZQXIpR0DS8inoPJ7pXvf6xUg
tZ0bO+KYgm2bJp14qxVQ2bL/NKM9BRqPRxggfgVkhe0977RPAdf8if+nwxXY
Gwtl5MudhnomKeu5lFUYPRec2h88C6++N79tzV2FgUn30LsFs3BI8kwlt2IV
tK6f163vmwW+dVUh595VqCu4ciB5YQ5+lL1bYyBYA77sHKaDH3PwRt3ntZLq
GsyoRH3ERc0D4ffexzXE6/CUQGPyWssinEQu62xSrYNGZHZD3+oiHKYQ2DFd
WQdacpt/qZRLsFPBm2XLtw7TZW8TixWWYH7ZjUZYdR2ona38Po8uQet9kZGE
lHXgGHS667W3DKFbP4w9ZP5AsvVeSLjkGtClpjckPNqADa0tTz3uTaA5vvI4
Tm4DZu1/HljDJpDLf22OVtiA1xRfWmOVNuHUX4O2MK0NyLYq6+Rx3IT1R+w9
/mYbILdNHsrdtwn1izHjdqEbEBNCGzbmtgWfOIN3lRY3QFrp9JLJ9jb0Jztd
I/bchOGDBs8Fqn2YfXZuyNRnE97X3L9jxrsPW/s/fAcDNyE3cvvl+cf7QPko
/W965CaceSh5L9VlH6QW+zoUcjfhnub0jQv7+1DIyWMXM74J8UzK/zuaPYDQ
1L7eOyJboKpXTm/Tdwia6dweFtNbEBy+GrRIjocrTCedjgtbYLjPX8vPh4fh
wC56n9Ut+EN5PiPgGR40bD7/Tt7bAiej2fHEQPx/CFs/Okq2DbWF49lnKQhw
SguvhaSFtoEm2qeIIIQAJ3vt5yS92zbkk5UHKucT4u6Gn7lTx7YDlYw3zPmu
EuEodfeKMZ4dEL3fSEgrRISb4p4TKxLYAVcBJdNzj4lwHiXVoul3dqBKkvKU
wEciXNeQ/c0A+R3wDZe7Lt9OhNO/tMP1wn4HHnZmjv9zJcb5/5i8tNu7A19T
a8nEjklwM37Fe9fdduGxoN6UDRcZ7maS97Kb1y50iWOzKQ/IcC5lL8dnfXdh
WJvOc/kFGY55ibg+4ecuXI8lHE4JJMNp31f4cf3XLtjr1RbTHJPhBneWha4P
78KvdFvShL5zuFZ1BvNrAnvgkNRjciqYApd3zXGFZXQPen65iG2mUeMm461u
El09AL0mQsWYOFpcN6ek0/bnvyDxLpKJI+cyjilMkrmx/BCeZLY+uiLKhAtO
U/8rfvQPMnTl9OYKWXE96P5QkfIxKPKFLMv8ZMcZVWmfuxp6Aq6tdO8Dyrhx
OtFDwWWRJ/BENe4Y6+TGadgrsWrFn0B40LT+/gw37pH4E/HwrBMgk7Ae8jzH
g7v+W+Tt5boTUJ4ZyeLT5MGNxpDXXNg6gZzI6nCvIx6crFOJDaUsHhq2FrNC
pW/gHmiLkGTJ4yHsQoFWqtYN3O272QFyqnhQPZLSrzO/geM8SEzx1sH/x9sk
kUwRN3BEZgH9ZNZ4uHXa+NyLzRu48pcGN88k4SE9LtQZH8mHy5OYKU9Kx0Py
+HB/Qy4fLoNe+7HUbzxYX3VuCm/iw4UNKL5yL8PDvJJtiP4uH+7Ts/8stgcP
ox4jjz3l+HEmN0ouxw/igejH2nGmLj/uzTmRxPvjeCA4b2M2Yc2PU2jgLnNe
wsOeQ3isXhI/7nFiojTLHzxMdzkYlJTx43CuzD2VO3j4om19cqWHH3frdbj2
q0M8kPPmvf2yxI/7f30++P99vv8Dyc9e4g==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 15.999997387755261`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
iV27rmhXSRTjwXHRwppCDmx/p8x4gaIYq5OW2sxH2LHp41nL4/FFeLuF7/sv
xT1Y8U3kHONmIWafN7/k+IsJSw8JzLrUFaK2j7xurc5uLPrBE7kaVYj0a01B
w2yMWJDMSj9ypRA/Hw91n4qhw1xpxrzbgv/1RyvvFn9Di9lZ1BaNy2Tk27do
WmxOg2m43oThZCzmHtFP192FyYpL7nI2ZJSXPvjpvhEVJpbPnPl1iYzVU2/K
RWwoUf1bOcgOIOqf2Gsh9WCHJIchbRNuJLwXd+0IB3GdxMNE/TdcmoSCP/sq
UldWSVs6jzeuDxYgy0N/tYHcFVLJwrkDeVCANZTd8YoPl0hxEHPs6Uw+MmTW
e0TfXCR5eTETD4Xlo8nShcsLqgukG6K9xp4beRieyDVQoTtHkrNRtoX4PPzp
9rtSaGiGxENOeruonYdtukNiXoenSYO6r+JuZ+Ti29eu2nun/pLKYsdyWE1y
8cV08/nWh+Ok+MWrVcXsuXhevyw0dXOUZOktMCNhmYNCtbr2oprDpJud73f6
Duag7XFBldecQ6RTh+fZPtdk46nnNCwOYwOkbXKh9D/xbOQ4FCzVYdNHGmQW
V0rpyEKudvufvpY9pFI9v1sm77NQMl8kn/J9F8lrydiheiQT7Tdtzg9QtZMs
z1d9cPmciat20HXZpJV0w0c6VEYxE63TPokZdjeTeMSoMfR7BirScn1vZWok
bds+rr92NQOP81UxmxXXkwYLmweot9Px+qN2eg6eOlL87RjqJ7fTMbOAz0sj
sZLkFce8T5AxHRu5dVL2xFWQLJefHW7J/o1CnnHfPIrLSDcv9J72ePAbpfR8
vspvlZBOf1RWVdj3G3OkTDvTbxST+LqTbs+XpCGlZc27z6WFpB0xricxNml4
zJrW6LUmmVRWNPaRuSEVzVc57meY5JF+sl6LKHyViq9rpfTCGXJI3vrZac+O
pWLE7Je/5PZMkmW8QMmRnhTU3lqFrrp00s2V9y09niloJMn8hjyVRjqtOD/6
ST4F7buvmescTSWdEvg959mYjELGwYUK/Mmkshs35fS9kzDXQSKS4148yXta
WLdk4hcmtwfLsnbFkm6+W34pqfIL20vUvle9iybxCZaFf45JxDw2M7qd+5Gk
odyvhf+oEvEchF9xtf5O+nnzwbCJYQLKPLz/8efNMJL1zCm6moKf2N4sSCG2
N5h05j29uCzvT+Q7nVO9IxBAohDquBJmH493Nmj4lqw/k8rz4p/StMahW0NA
DS2tH8lH64XfE+k4nFZL7Jj9+ZGkNaua0eL7AyUnL6q8z/Ek8XnwtivMxOLT
J8t3lY+/Jw0JTW3EqMXiieenopmo35J+5ucfYImPwVCRSx5HT7whWd/yJj6n
jUHJgrr0ep1XpDNzBvd670Uj9/7rxOqhF6THudF/7UqisOvQ8PoOrR0p3G3y
6R6RKLSa5buj8M2GVK9xcuXn20jcv37+Ym2EJWnXfgfHi6MRGD/rpned4TFJ
bgipepUjkEdb4Uqb4wOS2S9aD7sf3/GdTvjNeK97pGA7ddY99N/R1VqHyVnM
kBTkKiah1RCOQwI3Ryze6JG2uTJPvfcLwzRNfZPUT1ok40TFi3k3QvFlllbV
sokmqZzYcG2GMwS7FV1s6P6okSRb7hgItgZhv67OW8VlJdIn8ynzmwGBmLmR
MrUlep60suXw/J1OAKqsnE22spUn3fajc83d/xXrzejFu/hkSGTRLx+nOz9j
4fLVb877j5FE8oRCBUL9scmXxRz5RUkfrqbE3TDww7FTV9+/6OMnzQ4pZLgf
/IQOT4qXPj/dR/ox99XVBj9itpTJffUiFpLl/rTQjvPe6DkcvRVvRU2Sv1CT
ASUfkMY+52K8zEYB9aPx2hjl96jQ1d6VxzlXUOu/a3z3n7doVxRtzJw9WBCY
f5DSWs0VS78Imex60FxgPHKGp73GBb/WSnruWJUUaPP9NHX87oj/aEJ+xmml
FUw86Q9UibHDXZKFPlEnQwuccV8V509rHCu4sNF46XWBkFDwRqHBI9QItW/2
VjYouFxKe1fvgRFeeMPQPa0vVkCOqGGuKlbH4xckHqZeKstXidohx0rIgC1V
2Fkqh8vn3CJNx7JXdWDr71OlsNdUCrxJyqwXrU3BT00p6X2+ksILmictWjKW
wNwftNuGyUph9LdclMfxZ0BuPHyw55Kvwg1jCqsC8RdgtM+9jt/0hwKZrZIw
L/IKXsr6M55dyVP42nfZ3Y/tDYi4ZtXU6dUoVGceeyLp4wbff5WTNXa6FKh8
OG6W7X4H3la6twKqxxVO31+TN/TwANnmOb0vmUsKT8/1CG7QekFgXtsJBWcK
QixHEf1nNx9IObV/XyKBgWDxrGl132tfuKQQZfw0mZ3AMKA0OYSfwEFAmr1o
gIcQfSW7N2XbD7pllnW+9wgRIFu80UnhM5jy/ThpOXGE0HkorFTV8Qv8yNJl
I9pJEZ59ZM3hyvsKGdR5kjKipwhsm68Th9cDwFCVL8fiDIGQYLr0LfV0EHAe
8aPWtVMkKDea+jvbBUOWjeuR86UqhEGFDne1zBBwXHhXApJXCU7xai+4l0PB
zbeqevbhDQL3XtKTEelw2FPB7/dnVZuQ7nLCKM36GxyVkyuy1DIgiD3X/Ik6
30GssLLTpM6IsJzAKCy69h0UOLsp7e3vE4oGisO8AiJAPzzLMTbDnODL5cS1
KBcJxwIi6doCLAh31OU+6bZGQpPQWttXbmuChOssI/lZFDSnBL3zVH1G0D/L
Qf9LKBoSMu//e0d0IHgtytEE10VDyx1eCd4KJ0JBgh7VO8cYOGInNSVj/5ow
c895x+ZILIi+cjKsNXEj8PNF/jNsjQVDpkU327R3hGvNpevqrj/gs/gVnSsP
PQmvvf6uyJ+IA68Xfk4MXz8S0i4yLx3uiQNpCl75dX4/wtC/E/OcH+Jhe22P
mXXOZwJnxs0ZylM/4UPRTLZkWADh4hP7yZmhn9B/59JdmYZgwjOR0PEu3wS4
F87+eOx2OCG2B0cqFBLhabHu8qZgBKH1y9BgxkQiGBq82ZZTiSLQadD1Rwb8
gkNzqZs3o2MIp2klej5eTAI1tzsEafk4gjlJo9NxPglsdqup9zAnEIKfW7eZ
hydDG4f3gvehJIIpl9rDBJEUWFP4I9yOKQTnxe5xQccUWPbzN7X0TyN8rbN4
ENiYAklaBSdXfdIJSQkUoyxHUsGUniNvOj2T0HdPeGizJRVWp5hi0z7kEdYg
08haMg3Kb0320RNJBDY+lf7xN2lAM3Hqz9MvZILYWsedux1pEBbspSxwuIhA
bH7U03L8Nzgzf1WMby0m6KRs3b7i/htWx/SaEmNKCVZeHzuLun/DhU/lu7q/
lBMiL/5uS/ZIhyHFuvWa/ipCroDSLdH+dBDIuSJIhFpC07/W5lC5DDBv4ws+
eK+eMNVudoPDOwPe3K70HsxrIFBnbDR4DP2ndUXElsSbCHyfvK5RyGeCpIA+
q0lqM0HmycG6576ZUOy395natVbCfZEL1fcUskBAzpN2T3cHwZmyWbXTPws4
nTOd1au6CF977v+5NpEF0swlmqS2HkLZF48yhYBsUL3XuZ4kOkDoteJVSp/O
BiYuW51g/UHCqvqvYvGLOXBw8ONSedQQQYy2gcw1nwPdS1pDZWajBOKgMfhc
ygU9LWEejvExgi5pqYA6PBeUMpzsA17+JXx4zp03r5oHZ68YPXw+OEWIvP7z
jFlEHjzf2jdpmzVDyDt2Lrt39T+dmFW+rjlHmBq9m1EVnQ/rErxbDvcWCNTF
89IXNvNh/zcr88hXi4QD31zTsjUL4AJNNqNe/BJBQ/tHcsx2AVRZ0PabHF4l
mEqfOcanRQK9hHyFTMc1gjNrVaJfAgnc4r7J+A+sE5LLZ+Jf6SCYJyt+Zer+
R+i9w+x0PB7ByGa1g057m8CyInGtbx1BhslZ1WxghyDnJ/PymzoZSvZHX+L1
p4TanmKT1Wdk6PYxi6i2pIL7R25oXA0nw1ZQ83MR7V3wmWwluDNDBu6u2tI6
Ag1IMlHu1uYqBMv7AhYxRFoo1vZdSoJC+LoduCx+hQ4WZpLK7/gWwq3Fmubb
rxlA88DUE5JUEYSx8hicfswC42YvtffpFUEFv3vhg2JWcElnPG/xpgismCIj
VP3ZIEXtCOfBpiKIus3ksZeBHVQCsreebRYB+bqmW0gNO/QNXhqrOVQMF2aT
5EsCOYDlhWmuk20xGIj1SsUr7oXY0uWoltBioC7gGM0/tA8U9rz1PlpaDEev
ioLQbi54HBdl2LO3BI5xsGcHznFDZWs/rUJWCXyXDd8w4D0AxkKWc5/7SmDZ
TZTy0NmDsP5kp2OKrhS47ZUzc+/xgxjNwV+hOqWw8zHAl3tcAN5J377xb70U
hqdfqtL5HIKDrybO3RQqg12vh0T5LgpDZqWDaKJqGVi+fxRgsyMMo0aB67dD
yoBqlex4x10ULvq2fMs7Vw4diSQ/8/Yj0N1l4sFxvxyeyaZbteSJg83hJetH
3uXwQbhS2y5GAiJJ7Mq8veUgqFnB3Od5FCimr069eFUBjtKVZKvmExB4uq+l
8UcF9Nn92aw3lILjbhYoXl8Bdb70tY1zUnCH19uvU+APMOhdV6Hlk4aCy5Wn
5Yv+wLaA9pJUhCzMyMoUL07/AdVkprAzt+XgoFC4+q/9lSB7toB0mucUOG9Y
GQtYVUJbB3nqzY/TQEzY70UrUAUr0VunBajOgWWA6z6yWhX8U1iOyB09BxGu
098d7KrAo/ncFYEGBaDSL8yYqq2Crp+99QVZACVM5n2NTtWQxfFdLH3sPCyt
NZp7xVfDvxLXd2TrCyAycm5JqaUazEayPh2mVAT3AjaGHMkaiP5SE6IodhEu
WWSf/NZVAx5JVT5PI5TBXk+oQIeuFtpOPGFkunwJ4pS9LrFL14Ljovm869Il
oOc31H/7oRbcDTQ2Lmtfhso6OvdHZ+pAJCnt+16NK7CRZ8Umcr8O7jkFV1rv
UwfxuK7gXt860Dl+3OT0kDp4uiQna47XAXVQucSlD1chNjBhKkStHq5Zq4ko
vtcEkk9/qr1RPXwu17zPt6MJrW577bTs6kGQYrriuf11oLN6RckaVQ9LVAEP
2qxvgNnlG/vebNTDOxfpUbN3WuAC77vusDWAjNbao0cctyBQtuD7WdEG2KXD
nXYh8hb8ETwssazZANQx7bohFdogvrEBZvENkH/9yZljZ/Rg8mekuYZOI1gR
LolRpt+FlU4zqtInjTCc3+v25ZQhUOw+HnLWtRH2a0ebD341hH2P8qrFkhph
8uJeQr6eEVyQaD6+i7oJVGd1LfnWjEH9dnCFw/4m+D5N2uIzuQc6noZGc8ea
gPlOkDpd4z14Mjnl16PbBHxzaZK/f5tAYALNSlZyE3QdchgS+GgKUV1VPsdK
m6Co3ZVHbPcDSNrtdzimswlGDA+/0fB4AMWPDur60TTDgEtpOqeXGcxInMp/
fLsZCmODUq8kPoSLiWZvBOlaYMn2zq8ag6dwtfsYbyBfC9xPtxES33kKekzL
v1lOtoDxs3kqH01LePr49cimfgus6MaMPl23hGDJYJXWtBaocnW1MNG1hhh9
w4ErFS3QTtz+255uDSleoi+Ke1rgkhBDTPYeGyidSktIoW8FfSNyTmWdDcwl
VrF43mkF53Dy1VSDZ7DZ/ekHpW0rvK4UdlkteQa0zDpEe49WGKF/7VF19Dnw
Phm2up/eCjxSjziPU9uB8tGtZmBsg8bvBWb3Suwh7NexkKWMNkjJl3cI/OoI
FkzcHut/2uDZArGSk80JCI8o7bZ72mD8nC1J0tMJesWar9PTtsPjnMoBcHcG
gWgHRr5b7bDIFvxAWsUFooNLHBRX2sHWgW1Z1vEN2K7/eqDC2AEvl9mP1JS9
ASWdAC31gx0wyHL7/k12Vxjd+1BKW7kDZEn6FOcSXUHsE+vfh1874JmjeG3y
pBskvtPT8ZPrhILbEXJyIe/AcVRROUC1E0CBInR4+R2oKx2VCb3TCSo53e1x
mu9hhoqCLda9E4yUeescmTzghHNMeU5rJ9ztzzoX9PEDpNvOyQ0874ImN5kj
IzXe4NbUITz6oQuYN7TKD531Aa2TxeyT4V1gLJfRGBHvAyuzX2aWyrrgcL4I
/4MPH+H0o7Ox9Fzd8Lnu12rqL1/IN3LfeyKrGzxKbTXqwv2gg62naaS6G1IC
C++FjfjBCkr7hQx2Q+/2ffkLR/3hxMEBFjqWHujaHqvkQn+I6jxL32vSA9oa
6rZi05/hw435DU/2XhD/lqcWZBsAP6hUcs6L9UIlP+NB0p8AKEkNt1tV6IXI
gNlXHfyBsM16ZcnYvBeG1WzV/9UGglV17PQZci9I5BfIHD0TDDpK+v1jT/rA
3/GNNj+EwbOltPAw1z74tbjBnhQdBn5RDAY3gvr+2/+S+K3d4VBNmdVBKukD
wXPFHze7wkGg7/3fSuZ+uPPiePcTpe/gHzI0GGHSD1xzAyIubJHwgjOo5Sr7
AMzd5aHa4o+FR7tu9VnxDUDI/onUJaNY0F9g/+svOgBXhOcMPKJjAeq9/rXJ
D4B+xB5GH4kfQO3lcsjw3gCoOBsHHDofBz67zKws0weAdrVn6YXnT3i1IPzS
jzQAm/G6qhVtP8FyYMAtvWIA1C65p5YIJ8ANvB241j0ALUHRZnXkBOB+eRVd
aAaBh7w/WZ3yF0QtyDF/ujUI+I46azM6GT4PLO77bTgIqRSRVJX/ksG9PkWg
5eEgMOtt3P8lngJmSeIy+18Ngpi8gZWJWwoce3jwdsSPQXgi3mvgdC4Vsgdo
4lPXBiGf45jyJKZBdX3zxcbgIdgN5/WNuTMhU1/vdGH0EKzlSYl/uZYJEeN9
EilJQ0Crs8kl75EJzykm2X2KhuA8JjH0bGaCwAnKgcsTQ9CkyfcweDQLnn08
6lR4ZhiOdKe/82nMAUPe35YpisOw67y2qBx7Lqj+OG3yTX0YjAwesN6+ngsC
qKjmZDQMhoHTUfzNuVA5o7v/jMcwrKrSysT15MFBDfeMlPZh6JuNPqnPQAL6
zt3x3waHgXMhzueEJgkW738K9ZkahjUDTU6fIBJUOIW6PqYYgaS3X3+NSSDY
/ErTFBMbgd2dlPpfJMhQwdQ3/c1uBGxHuiuvmhSCVdUp0Y/7RsHxxJyBDUsJ
vNlZfH1LcBQKaP+t+0EJ+Emn9ByQHIV/H8p+sFuVQHqI2JfE86MQGpD6SKal
BNYe7aeufDwKIoRQ7j2RpeDMtDlAXTwKHfllfxM1/vsz1ElhL56OQcA9MbEX
q5UQ8vrF+vkXYzDpL7uVKVsFiRlyWgxvx/7zH/U7U9sqqDmQzBQYPAZKVt4n
BRargG3m28uM0jEw70/XZ12phgCf17pzvOOQeZfa4SF7HUTXXdxrWjEOib90
aeqaG4A7xC/EtnEczn62v8qz3gCepv2Crt3jwEj/N/j7gUaw3np57PvcOKx7
XtG6+6ARzkv8vtTJ/Rfc7pDP/9pqhF53wRca5n9BVTyZtkq2GbgJ271yjBMg
fPBKDU9rK3gxXLmvxDkBzAXNg1pUbbDTHDR54+AEjO/pMm051gajj2TXLE9O
QKt30Wrk+zbICHq8J0FvAhx5WdZcoB2uL3cq8idMgJP+7r0fczvAKzErju7K
JLCdLvaVHe8GUYFzATO3JmEq3sPlgFAPkP3Jb1uMJoHzlyyXsX4PLL74Yxxl
NwkedFHLVI09oHe5iw+iJqHhwHpKcmEvHBnd9n2+MQnxel92e+n2Qxm/ssNI
3BQ0KLUY/rAcBEP/ygfVv6eArKGX0ew/CBu0V2/9Jk2BUEZo9KmsQTg2oy39
unkKdFdPq3zbHoQv+ebTfBTTYMC53/DfxyEw0fU2uqk9DR17ZTSEC4aB0r/5
cjHNDDBI0CaPXxiD7bAJ43nWGWhTFLS1eTgGG3EUjvw8M8BTKDkt7TcGSyTJ
pJfHZuByc0HLrcExGJ1wY5fRngEBi9eu4m/HofqCbFd03Ays95sPnGn5C4EL
Xx67q80CrX9aq9v3KfiylfA2XWsWShdtS0/WTYEffVH44N1ZsAkddzuwPQWe
B2fqCbazsLllce+n/jQ4qyrLrob+1196WjSObwbuRa5sPZiZhfpjmy/N4maB
Kz6hPFplDqKaI3m07OeBfYvncqT6HHB/4Lov7j8PTJofKr9dnwM7iyPhAknz
QLVuVhOsPwfFgde1LIfnYUZFtMnXcg4SbBglv19fgLLx772OgXNwzD1ZT192
EZ6LfV2+OT4HDlXzfoJ7l8HKkcbu+vQcWKo6lVyTWYbH9bZrVxfmIFu3rSH6
xjIY29/YVP03B2asX6ny/ZZBo4KN8jzbPJRvVl//yb4ComaeTEdPz8NfeabI
qP2r0PrD5RDN+3nwTHMNWrq4DsNXd3dYeM9DY1vfA9bH67Cw+sWn3W8e5IrL
fPX814FFJWE9IWwe+vfYx7wZXAfl8Za667/n4dcDtfKDrhuQJSbh+L13Hq6Y
jCQl1WxCYHxL81nZBVg81Npl6bENsZqGH2LkF4Daxr93NnMb0tcngJW4AE9k
L+yOGd6G+ssUCYOqC5B6qDIqjbgDDBPirz0MF+CNjaig4eYOvBB3OdrmuQBb
R+9+DiigIN5OEHe3HlwA4qjXwa3rVEQe/u36V2MLYBnC1+j1iIrY6dfA6z21
AFYt881yblREvRf2qT9WFuDPt2m+zgwqos7lsu5uxkUo/CFGb8izi3hzzEj6
kvQiDNjXUjiO7yJeORTUz+u2CPQ/6l54BdEQmQIeSxzxWARKr0vdHzNoiFWM
xOdyPotAW1mhnNJAQ1RdGN2tGbgIVreEP6kw0hJVCmVOuScuQrK3/bMOR1ri
xbv13nPNi7Cv7Y+t7wM64rkQurOlIktgwXv3xfINBiLLvZUcgsQS+F9Os7d6
zkAcEB85nX1iCeoHdP+xBzEQ3XOL5BLOLoHcDgtLeS8DsaHD6eQnzSXYfu+b
tfKIkWjKvXTEwGkJvO/9UPjovZvo+6Wfe7l5CULFjxq8nmEmGhvUBVh0LsE7
5RGvib0sRFkR0r7xviXgNJeVdVJgIXamh3B2TSyBLtHOmt+bhSjSfIutkGIZ
flPLnbp9jJWYy15D5y25/B+vTD01PcdGHPqYsyLstgyPtiRXzwfsIZ6M9Zpw
81iGywO2gUq/9hDf5N/tHfZZhtr0x4S7xXuIAn9pyqKDloFb+Fln8+we4p0L
178IJy/DlbBloarL7MT2pQlp4c5leCV+9tMCJQexWpfP6tCJFZhqrbaJcuUk
ph96NSnYvQJnTYzsDeq5iBk0IbYiAyvAZdZp7T7BRcwcy9wSG12Bkmup98uo
uYlZCTOsJ+ZWQFt8ydLzDDcxV/qODIF6Ff5kfS+TiOYmoqKCk57kKvRobFY2
Ou0nVt7bZPF3XAXjmGIHUUVeYn+U3UnqA2uwkdUWp7+fn7jUkTRrI7QGzwfm
hF6e4yfSs40mDh1eg732G1dz7vITjzvePFx8cg2yziVwf4nlJzrflOJ7o7IG
YXohd0d5BIh8NJM0FLZr8IJ8IuHwLwGirumdjs3KNdiiZk880CtIbBRTclm0
XweKsgsSGrbCxADx0kZa53U4MOrIkvVemKgvqSTC47oOtMaKZ06ECRPHjitV
Er3XYZPD1OtGmTDxn5wSp0/EOrTtt5S/u1+EKKKkFCdWuf4f15ap+xeJEO2N
lOoNeDfgbAZ9/2/Bw0T+YCWBioINmPWg4mbbK040nIgfKyzagBeCB1kNjooT
I+VZkvPKN+A3fyJ/vpI4UbSrVSG5YQNykrwyUp6LE4/xmd3+OrIBJ0+fqLft
ECeeC//w1YR5E6xd+xKsIiWIZwf/DfKqbUJ/zO0DO8OSxP8BsuW8hA==
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {-14.708802764939277`, 14.447258870542043`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 63.99998432653221}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {-24.773305290563442`, 24.16116803608094}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 135.64920262580074`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
8dsDvfu5ijiFn5IuQ7ALsUVl/6meU8L9DzBXBiI=
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {-42.80210042446765, 42.197513312901016`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
I64EexXsmkhW3YFYtifvtr4pxjI5TNu2MzqQ5ltWx2h8ESYhJ8nW6tqBdPOk
FgZoCjC/Ed6HxWYd6KSIRP0L8nxs0OSi9XetDiR3brl1mSoPMw1e+2Un0IEo
HxezvL+bg5VyDG4ZsnYgQqK09XT1bIykuPbyU8r/dJKkapUvWZhQKf+UZlM7
Gjj3ooJzLwNrGyO7KxDfjlziNJO2XdIxXaJRT0rbdqSgdmpkni0N85d3v11x
vR01sxkWNXmnYBzmWm6hhO1I2+iSlJtqMlYWenvw3UAbsvDeiCPmS8Lmx4Y/
M3u0oZsHH0SvkiVi9kQ5vXvabSjWarCjmCQBO3f9y/UOoTYUFcMW/I8mHsOb
3+p0nG9Ff8Y+WpZIfcP6QknYn1W2IudIfqWgyRjsbenQ+1vhraifa3r7g1w0
Fk7kxjIp3Yp+GbAjbZUI7OZ1DcsS5lZUrCp4u2c7HKuV52sM3GtB6wHf93cS
w7D10EGT+8ktSMqb7fj9nRDMrfRnzSWHFhTnIUPtejYYYxx3od9+2oLKmu+n
BR8HYjLXeVEiSQvSlrD3VTv2x0bliWjtRpsRSZKXzjyNP2ZpPqCnUtCMrhLI
b+k+98W+lTpTkeg1o6m2130dF7wwwXE1nVFcM1I81FnKC/XAWohuFhTQNSM2
zYRw9mvu2L58v5Z+XRNiWuYhuOngivmaZ2RDdBP6k0llzyjpgl0NcyJmsGpC
759IO0pccsYUxnkyGq82IWT63e3BjiP2UPeaNhz8QvQF5p9I6h0w2XlW2oLW
X8ijS7F1pNIOk37LWM8T/wuJDpDH2A18xCTWz39IsP6FyitqGbSobDExyzM8
F+V+IbXsLRHi5+8xbJ9izJ/5F3phWchG02CNCREQSto3NiKmh92qZOMWmIDL
n73tqEYkbnvB94OPOXabbDfVyKwRkaryMykrmGF83utak5KNqDK/+YL9VVPs
Bs0SzbOLjQjf8Wqzl/4dxhU8U9O+2oBep9+7LHjqLcbJMG4tVdOA+D6HHwlc
eoOxsfQO879tQHO39s+sfdXDmBPb/VLxDchA/g2h/MnXGCNnkzgrXQMya5MV
CnR7hV1Mr90JW6hHpcF8XyTYdDB6PpRCVVGPDBRGK496tLFzecUaroH1qN35
RluzyAvsrFAe1ZFePfqULlHxflsTO43/YblAXY8eiYtaLfarYadqE65pT9ch
4WOZO2L/nmIkMjGDfUV1aLKapCJIUgU72RLuI+9Th/SGH09t/lDCCBSD8LUv
65B+duewB9cT7G+3z5aIYB2ac46mja5TxA5V3ZOyyevQxGr/0pmtR9jOC7vT
sbm1KNzwX3GknCy2OWWD6Nxrka+V2mykoAy2rm9u7q1Ziz68Wo+ZkZbCVpbe
sp+8VYs6J333CO0ksEUT/f4PxLUogvbT7+hucWxu66XX+kAN0rz07q77AzFs
2kYT08+sQaRiFNPaxYCNOjxOVFatQSXKUk9ZkkSwoZMPVZu5a5A7yyyn5Wsh
rP+LFLk4QQ1itzDwJX0siPVRiJUX9VSjYJ6bou2v72DdfvdMeX9UI1+lAuG1
b7exDlrBK0l21cii00O36B8f1hbG18f4pBpNqtiwPPx3E2uMZRcl/1OFOP/F
kEjlXsfqrrCsObZXodN8Waldz69h1ckX4/cSqtDOsy3dT/fYsUpuOpV376vQ
3pqdVrzkFaz8JzXZzMMqVLfpqDr+gRUr4Scv1WCtQlxHyZ7nU5mxokKid107
lehL1t3TmimMWP69fywPmiqRb85c6OmFC1gOOuhGMZWoqvSi3El9euzn/W03
QYtKlI25G1hdpsPSG1aFM6QrUe7rV3vLpLTYD7mF5SuMlei0RFr+fbYzmHxs
AwhMIJRP0+Ql2kmFySSXfWfzRIh2jUe4PZMCE/+ZTUHDj9Dgv99KX/vIMNHC
JLO/QxXoKPScrak4CSaIIn8vulQgwhoMF7N8Ert4mmghhr8C2WdS6lBuEmJ/
1d4ePpksRwQW3NeF2Qmw8e89FKQB5UimV8Krn+gvrnZT9HIplCPB1keLb04f
4lLg+02T1TKU1BroU6++h/P2psRfiS5DmSKP7xAsbuNMB6we/5YrQ63M8T+i
8jZxShyjOl6HpUjOvTPUI38dJ2ghZQk/StEb6DK70bGCu1iZ6bqlWooO49kX
R/0Wccen6cOSSUrRTMwDv+vxc7jJZw4pGvklaNIjlPbnv2lcfdJcMbVuCZqm
b6NNipvE/dhSaK45W4K29vJn2j+P47zxRcM2VcWo1sPrcOTOCM7Uh2WV27QY
dfih6o8tAzjlQfd/Y0zFiKQy7ElrZR/u7rUNmuDWInRKq2d/h6wHd9HyGZvM
pyKkMhd7aSCqE3dcWcV/xFWE+hU3BBkW23CTlFySWQOF6LnqbZ5AumZcnXrg
U133/5gEjmp/NuBSkg/1Ge4WokZ+8YN3GbU4722dDy0zBSil8cvVJ0TVOFOx
Zk/H4AIUT/2+EJ4inJIvf9Sd+wXoZMupsubbpTjBociM+Y18pKxDc+PAtxB3
kZMIRX3LR7IbOgIrmnm4Y8u3HYoK+ciDzSuUzT8bN1nVM0F0nIdYT1xmiRDJ
xNVT4baK0vPQwxCXr3bbP3A/NL4TGWvkoeyCTtPYe0k47xTK86zkecjQ44G4
z794nOmO1bXeolwUY8NK637rG05ZfFTIQz8XmVbSSpW4R+KE/KRkcedz0dFv
MgtntTAc43CmxkZtDqpy/eLwqjwI94+T3vi7RQ6ytLywHZfoj5u0crB/xpaD
Qran+0T+eOHqq+f8KDuz0d9M+dO8Fl9wqdSKcVUO2UiNi+YxeZgzzkezKMfq
ZjZ67EVuXqfgiDP9wVJ7fSQLCQciXb6zH3HKu+69I15ZqFcrSVNbxxondH9j
NkAkC7nVEr0aNjXH3WXJXffq+onW9YWvJUm8wx0XO9Nu8/5EAy3MkVPlBrh6
JWVBTZ9M9Fdv6R3hVV2cz8rVZ7WLGYhweOEzjZI2TvnLzkcemQxkP00Z9ldV
HcfIWh8T/D0d+SfIEJFxquCmSkKrjk6kI686Kx6ReUVcqrL+tK52GiIqneFQ
mZTFma/eJW0tT0WRHAtH78QlccLuZFwCl1LRsf14eUAhHkfANvAw+v0PdCKG
izuKTQTXUPrDhLgvBTVl5AQFyN/B+arYBhrzpyAyDZ7Oqqe8OJU12fxe/2SU
pHiU9oCYE8focakft5qETjVJ6PNKs+Gm2JYPv8sloclMY4H4iEu41LKyy1Q/
viM5ta9ue+nncOZPffDWJN/Rt2tuY+T5VDjhda1Xo68S0ZVU4y+fw0lwb0sS
F2xqE5CmtIDDmUACXIzLkskZ9gTkEcYUrEOzL9rx6PZuqms8yqgkGiSQ3RA9
eeHDJ4nZOMTg4Nf7xH9eVHAKnRiVikP1Ae1fNHETogYZJB42yd9QzCa+Znby
t2iEjTz1GbJvqDyuPVDncYfoV2dObpXOGESuyDdEulsnekxfcNc9MBqlM2k+
+kZbLqqTfl+iVCkKBVfff0G6kCPagO9UXD0XiQi5XN9zs6SI8vQ+12Lt+4oa
ffcnHdliRAMMlw2Vw8KRpdBglMirQNHdvx+sv6iFIalaL+vxUVfRSo4Qv5XB
YGQ45VwyofBWlL2ULYolKgglEAe88Al7LuqpkJWipBWIKOxLLp9HCqLJ66HO
FsgPSRtLLCz73xBtCzo5T/HLFWXlDz5+Ndt7rzKulbK5Rh6lWt1hMySJFZZJ
+FeZxH0HLiqQnR+RShRyidebK9pTg/3nkoOl+nQitsTGvSp3TKHoqwWnPdem
SOjYA7dAGicIESLViFhJvZf4sGg06zgQBlnJ0pOwp6JQxNVlhwsGMbmgAaK/
uqKDV6LrZD+FQMaLnOVxGgtRmj+f06cPwoAqmvTneW9v0TS97dhsoa/gq7Oa
spIZJirVpRdkbxMBawQXfsTxJIhO4gbc5AoiQXg1vmxfK1PU7oecLcNOFGwR
NOBq/QtFGegqjGf4Y8CZr8Y6a6tKNM+R72WOeSzIPA1zrJxqEuW0fpyK1L7B
427SEMHubtGdNPKrHPvfQKDgM019+7Bo9URNtHdYHFhvJzwYSp4W9ae3o98S
jAeXfvkfzrAi+lxeMOBZXzwEKRHxfbDZFuV2XiOvtEoATTf1oFMqR6Ka92jJ
MtgSIfl1YNTTlZM47y1B4oj2RDhy6g4ILqTAlaepn/jy6TvQ0pj4752lxa2+
sv9ncT0JbHtVqB2OL+CYGeOPtPuSoKLwdPYbb1acYk/dgbxzMnQmOqxVfbqG
++y9sCvClwL3hqSHzW7w4nIkKLevjaSACXlKMp/7HdzUEd/GOc8fUBFJbHyy
XwR3Ll95lfBuKgi/WJbZfiuGkzB+v7Q6lQp3JaXaH36QwlmxR80P+adB+J1X
I89aH+KSRtBMIy4d2J1uhzuoPcH1hUxN5i+mQ6sQu3ejqCqO9BHpeHxYBqgL
xUzvSmrhhEi4R/wkMkF1Oa6wQFUHZ1jxaPDTRiYkTN+1NBrTw0VYm/82jPkJ
76srkzt13uL06OXepLFnAUe8gU+6uxnOfmt4nvVTFuw5Yl4UAVa40PZ3+uFd
WXCRw8NM/40tLjONYJbqejYcjocP1jE64uq/BOq6OmSDEsiyGAQ748ZeXZ36
05sN5Opb3/TyvuD2oeClOU8OsOtpNPiHe+NoGGXG551y4N4XR2klvgAc5/7A
8xcDOVCmq/LQIDwYh+8xGunlzYWezSd7Z76G49Sy/mo8dMuFqZhvN78+iMaZ
efsNVg/nAr5B5ByXThzO04D1mTB/Hti85n5kH5SIi5fI/f3TIw+C5nVH3R6k
4EpYJJ9yjOeBp73FfbqwdFz3UV9PlGA+WGpcg4TGLNxyv4ESrU8+nJZ2Lx5L
zsUR5R92ekzlg7NYMa/NbgGOMcBbkUCkAGpn00Y5a0pwd4yZ2q39C0CVbNNK
hwnhHj7Ikl+ZLYDzAvboDmU17jW7eMsrXCH89NEkqp2pxdkT9sgOBhXCjFzD
a6arjbjQkde/FBcL4drxKfvCnmZcZvGedAO+CK6TqX7+caIDVx/iUY8LK4Jx
Q+9nATpduFGzS5J5K0XgrtR+z+JsL25PPqOGS6IYynx/Gnz5L6ppuEA8LqIY
7jkpjK5/GcJxknRW0m8UwyGx9rlOnTEcflIHfKVLIDkrwvPm8ATuWcV2OVFM
CbimO5w8lJ3GmUe4iX7cLgESyw9Rl4jncJ7WDKUbsqWQRucwHXB2ERf/JFXY
IK4UnrIW/jn/aQVXelO0aHSvFPxHs/zCvq/jesjbBFUelUGKa84ZxrpN3PLs
i/zmxDKg1i/dFGXbwRHVbPCL/ykDnxecU5dq9nCXY51zih6Xwy2BhYiXmYc4
wY90t3hTyuFPY/5P6aW/uEeqyT+/H5eDiPz1z52VBJgev/BNRpUKWFchfb1X
dgKzp25OD0yrgMcpm2zpq0RY6JIm96kTCI7uvPeZUSfFfjas/nBQQ8DgQXnn
Hwk5Nvqc0o73B4IT9K+MLtWexqh2uRXHDhCc+QE9K9XUWIzU9wBp9kpQct1t
MXU5gwkG3vkYK18J7HE/7SblabG2kRrdPatKcKMVSprD02Gvrys9UoiphNbV
o7hubXosuNKM9d9qJdBfJDn6LcCI8ZwmpFClrwJz732Wlk0mrEbVfzsTqgDx
KVPy77Jg6gnMoyQGVRAsd0Y9PogN21zNbHjuXwVeNCuGXMpXMU8RLLugqApy
wXb1jQgHxubWGkE1UQXUTXg23gec2OPLy8YVt6rhYrBBmuoyDzZv8FH1vHo1
fB1swot/4cUc88jF3jlVwwmhQ94J7lsYA0EEV31qNQR0nPbvzLqNZcldP8fU
XQ1v93OirJTvYDJhRX+t/lQDiWA5zTqDIDY2KT3XeqUGgs+yfnchEMKobPVK
7CxrIOxoRrxEXBRLqttJ6I2qgclTQ3Jh8RiGO+Pqc6OuBnrZbC4Sh+OxHs1z
Nq4rNfB4fOU+xZ4Y9jYlQXuErhZyicpP7Zrcx4i2b8sKYLXw+ckjT0siSSwS
qvl99GohTjZO5FGBFNbUN06CK6wFv/SF8uwPspgOm+l68FgtDFbpLD3ye4gd
GP8bWCatg8KGbH/TpkeYf7FvjQRfHYgdJHDkhypinMRMGVFqdcB7omBBdeQx
VqmYEbrtWAfnR7j4jESUMLUoUceHP+pg3VSCVe6nMvaFX0Pp6KAO7iOls9is
KsbksCiqzFYPzf15igZpz7CCpg8c6bL1sP9O1tzPVwN7dP4UDZFFPTxyH6uy
CNDCZl+GH2hE1gO95KL0cv4LzD7j2lRuTT0s49Ymt461MbqDghaK5Xo4h8eN
FAjoYBL+vbGlog3Q+2Dqy/CYLjY8pOtB+7oBnlju6Hqo6GEW17bNjXwagM09
8sh/Uh8jt3DWrMlvgGvdAzdw7oZYfMVZqUujDfAmrDdlTtoIEyGP57UgaYSi
O8zBh2zGWKfKrQvNNxtB+lzg3Y2LJhjBisKyrUMjfDlzW24+1wwLFxrr7Upu
hAe3nVeIx80xXpd3iKujEd7FduTNX7bEnl/yCRxk+QUhN2oIK7ussV09xk+3
H/yCvqwOtmy595hvTtprT7NfQB1j9uHl4Aes/EGTkEj1LxAlfcr8EWeHrQrc
qdla+QUqDaf9Z0UdMCa2GPmMC02QGN5E1ZDhiNkfmumwmDXBJarK+9nHTljm
7NDyQFQTUBrbRdCJu2BjXZI2QY1NUD0bG58X7orh0y54k7A0Q6351JciZ3fM
NMz5fKVcMzS3u4pIXfTE4pxXvn2waQaC/NtCLxu9sBOaVfnLbc2g++hiC5Op
H3ZbhhufdNgMjKf1T3EV+GOv7oQ0veBoAcKkfY+Y6gCs9rThWJddC4Q1qeBt
TwVj2/tdht4/WqD2geMtA8kQjH1GdFuytwVedRtQVwSGYm7lNKeKeVqhNSVV
jer1V6zgh22QuVorAKOkWd9SBDYbMn2Zx6UVQrMwu/gvUZj0u6LbsUOtkDZo
2HGN8Bv2Xp2tXI20DYRpNihTNr5hKVLe0mf528By5sGpptU4jIxZW9PVsw0W
PpPkPD6TiAlRNM1iBW2gnGq1v3P3O2a4x2+2P9EGmjfYIouNk7CmdlI3I+F2
mMov0NE99QM7LDWjYX/dDqCd2oZMUzGulKGIUf92YLpPEnNlMQ3zcvz58/F8
O3yOkjWC8z+x5wWno4nJO6D7u8175ddZmHW6mM4kcwc8txIWAtlsLCk8bTlS
rgP4mHrY6QVzsQrf8ez3LztguzR6/R8uD+tzobNRsemAdgJ5XOiTfIzUzIGQ
OqEDvlSNju4lFGIs+nn1S0UdsGA8rTE7UYQJaS14NbZ1gBaJ0XHjzRLM4IHS
eafDDjgVfOXZyl4Z5gjuQ89pOoHCb/jQ3qoCCxco/3aPoxNO5hS+f3KiEvvF
eo1753EnJGQdLchkVGGT9JrrnfqdYOeKCzcOqMYOKQPyM+06geS39bkxhxqM
6/AQDH50whtCMdnHdnWY+DovsSTqhJ3961m8PvWY+qxuE2tvJ1CtHVue/9GA
eXa1KQ8RdAH/unTEFEkTtpQab/hIreu/vqJuLjBox3YHDU7UGXcB852rV5ZN
OjACCt7Ie85d8FPnVL4Sfyd23qi0hTOzC2JVHgV2dXVhrJGfX8fWdEFdUIib
689ujKdZ+phuoAsumO5XS4X0YOLcPbwnibohqynsnbRdHyavEdH44UI3NLfh
JO86/sbUvLRfrt/shnhfIrVQn37MeGk5cORZNyRsR/Ox/RrEwtOIdwt/doNT
V05rRNsYljDU7HuzrhsiiSY9KMPHsUyKwGvfB7uB7ActUabCBFZjxPQskLgH
jPVfSbj0TGJtkdMbZJd6IGDCsk4ofgrrb071dODrAfP9DO5mm2lslftu2VuN
HriZU/8s6t4sdqDxV3nKtAeMtH18DbnmMCLvmpVnbj1AQmYbdYttHruwrMAs
nd0Do1hi4OyNRUwi3cCJlbT3v3vwf99ZsYopDN+8FM7YC1fLPskqH69h6qd3
cqlu90IDd0ZRaeI6ZvL288wfzV74yS3xkebEJmYbJW1vbt4LLP5iMXdLNjGX
Fkr6hS+9YIZopnffb2ERPBEyfTm9QN5oZEBHsYN919SeeNjYC43fPbimR3ew
LG8O25qRXpCFZE6ukl2sbjknLYusD4q6C2lOu+9j6+nNVF7P+0AxX/L8efcj
7M9wQDKhZR/oxTGYOMX8xUgo1fDvPfqAxoW91bziGLtkPG32Oq8P3ljpChP5
EgBHdCr58K8+2DfM+nLlBiHwtZomPBnrA06LFaGYTkKQuvG3B8h/w1eVc9qy
3CfhsVaNcQHzb5DPoenqGD8Jmj4eJDcEfkMov1KaZhQRmK/QCV3U/g0uAxVD
IhwkEJ1xM3I7/zc87TL2VvA8Be9OM3gc/PoNgrbGNTdekwNmRGhzPPIbXnVc
04uRooBRzp4nZCT9UJM4erx4mRJYEj+QMz7th+Bcu5j0ABpYP/Fqn+VNP4RF
fGzZuXQGql4+nGW37wfh1q9PZVPPgA4zczVvUj/IHrsbfe4+C4kRtR/u7/ZD
n5tZOk6DDiwPMvRlyAfAcdGwbIvsPEiqhanIMw3Avu0z0+jS8zBL9+aWqtQA
mNDUeT3kYwDOAOqFN6ED8I4ak25QvwT7a/t9JqkDcLVE7V0NPyP8ejRZa1kx
AD78Nycbzl6GN6fzv9nPDkCKJEuW0xQTpH9RVwsUHIR6Urpaqjes8Gn2vlSY
7CBkyQteGlxnBXnJG3eing8C66hfsvxHNlg9QUCT5DYIZWWMU18irwCf/feG
4r5BOCNJrz9CwQEEI775FYuD4FkeWvIxhwM6771PqDkeBNJqwtMuWtfA/EDW
oZVjCAwCCJRxVZyQZ7kuOGE9BF/vCrFqVnODS/fA1VnPIWgU73+p6McDKrdr
zi7FDEF2/peEwJc3YHctZHW7fggSz57Vtz/PC0JG95LI6Ich606CX5XOLSBr
uhpMyT0Mt440soXHb8EAJ5XTWRiG6bKMD6Pat8F2dlyLUX8YxE8Hwp4RP5S9
dKPjKxwGPPak2DZNAAZoRrpnWoZBV6VB4fNjQdhF/IGRk8OQPPJQ8e8fwf9y
eoKKlGoEQqrON1U/F4KEwXtko7ojMHgc9fLb83tQ6RFYH2Q7AkEa6feMuEVh
WGjB5YH/CGRaut8K+SsK58NCCfNLR6DwNOy45WDgqbRx6HV2FLZZWe9K3hKD
5BMyxWKco1BgtsF9kCkGtdkxNnu4UWgKptua4RWHY+qH2zqG//Ga2sP8e/fB
rCVpRbhyFF6eJYhVsJME349/09Z6RyHBlYth+bwUpHIpv/m+NAoxH/epdfKk
YNqdcI6Gfgy0XHI/3P4jDWqSmuNzxmNwpv7Kk5kSWbDazomJdh4DbWXN4yYr
OQhMOKWl9HUMTlpmBUsKPIQWwsKBitox6HrzZf1FtTywjLkvNFGOA4PO8DGZ
tyJkCuY1fmcYB+5OxmvifxUB5zuW7Hhl/L++OFt42+wxqOME9QSFx4FfWMre
6uUTCIqcmozTHQcfe89nt14rA9sWVfUnk3GQsJcI6l5RhixZkThV23E479lv
k/ZBBVoO/F9Q+o/Dkq4qkVjkUyBRw4bfl/7nn126uUv6DIJ/GpYq1Y9D8Df6
FMH0Z3CFNCTiZuc48IapZ2LK6oAvWFKbnh2H5XCH7O2fGmB77muvwtkJ8HTs
LL4b/hyMTj4dM2OcgH+C7TFFCi9Ac/PsQhDHBPwqs53yJNYG6PA++i0yAQXj
qda/67WByNvxivarCfis1PVHWEcHdmxxN5yMJ6DK+zandZsOzBoeCibaTMBL
zo/uq6Kv4Je0pey813/69Y7DchZd8D1pYGaaNwFcb9drSIn1wGHz6sfAiglg
M2LyUHbRA9OJCZe8xgnYIRviEiTRByWkEb4//B+3llfMnTEAho8KyJF4EgTu
7A5qyr6BhE1ByoCnkxBbZPDoUNYEgie2zudqTwJzRIVq8IEJuHVksfS+mYT7
UglxLSqmYJDJdeeCwyRUOjk8p6E0g5tvmDTikidB1NCX3iTAHJifDenWZE/C
OR+BPvE9c6CRCX83UzoJmc7zdKdfWMAW+1mn6x2TMJP80jLujiUUTRD/yN6f
hHu/Q9+271vBj47qnO4TU/ChlficlIk1RCCHsp3TU0AXmKV5OGcNdtEH7cKs
/+lJElbi4zYg/mxlt+rBFBgjynv6Kx+gpaNHoitiChRGribzO9tDgaa6UFXi
FPipXabkY3aAuPkx7qzMKXja8S1/v9wBrAmWzvpWT8HZwzYpKidHYOEjnHiw
OAUG3Nca/gx8BvIytx6h7SkYEJA5187vBDvSpxuvHU/BdlXZcyE/J2h6Qf+T
+Ow0tPF8NpuVdQYrvxt2VcLT8C5YhN2gzwW0L+WaZt2fBh2fYI14nCvIJgvp
xspPA/OpkuXkJFdgQffl7F5OQ8Lbcp9b9m7QtPrsgrDHNJxU8xGkkHAHpkdu
+Vn900ClMxTpd8sbyAYpfsROTkNSWvipU8XesPU6IMp3+b/3mbegWdwHGu2i
nN8SzMArO+fL8lq+YJGR85iTcwYqPkuYxqn6w3NhIUn62zPQ/OTdv+NEf5Cp
KxciEZ2BDP+yoO9b/sA00sg8rTADox4VYhPBAdB4emwl1mYGGJkorGPmAiEn
XHfC9/MMIMkM53YIguiriz12XjOgQTjHbf41CMxFd0o1YmdA7cSZ36yPg4Hx
LYUnfcMMCKxNQl1XCJg13+XwOz8L1AVHNjeufgWnf1ufn7LOAml3OsVy7FcI
5M8aucwzC7BOWtp6OQLyIjlD0sVmQfxs5BlGlkjYN7pA1PR2FuxqRm37IBpO
fet9EWAzC89iRIliW6PhYk9AqZrTLDheuL/eoRUD90TJLebCZsG87alyqGss
2J/+M0FUMwt0WcnHAwffwA9fiGtpnQXy0p6SBdk4+GZp8TWofxZ46xh4VaLj
oGp4SZFtdRY86MKOlaTigShjGMGFOeAtuo9z+5EAnvIV0bYmc1A+NWbwrTgJ
Ij/bHojZzgFP0JedY7ZkSM8XVDnlOgeBleZvz/kmQ+vln6fDI+agsP+dm51h
CtCsxn7Mr5v7r1+tVo8FUoGVTfP3p445CMlOqG3KSIXbTxn4JYbmgELpuqPT
tTRQrvBf7Fqfg88ENyo6WdIhzPfzs/VL8zA1ET9VxJ0JKdW4/EKOech2dx1I
z82Eot0DGodb85C1LMffgPsJg8/NGyml5+E9TRqpNE8WMPG+usttPg+xO5hq
nHI2JLZL0Ok1zsPh1uQrqbFcYIgMjLTsmoc+0h1ue7488NIbZ3Uenofp41PC
4055YP73481v6/Nw86Ov1m3ufBDjzpUeZFgACVWXro+eBTDqxmr7yHABOo26
jPi+FMOTJyYEWhYLsH1M9XV5uRjqLpe7GdktwEPdjQt0yiWQnqcW5B6wAFnR
eyLlHKXwcdIvvbp4Aa59u1yxNFIGDNjxqCD5Ikju9mv/lasE71MPX0ueW4T0
jLw4Da9K+NfzdUmJaRFYqjcehTVXwqyRwL7p7UX4ERKblf2oCvK/vj2Tpr4I
JSkrH9CLaniyM3ifOe0/5iy4jX7WQn0lZ9ON/EUgEgmxkzquBWFva0VRtAhm
V3YzBuTrgOXKWa1n3YtQdUbBkm+9DtYUH1gH/VmEpTPmuodiDeCdXphC+nAJ
RtV16jcZm4CDRTRs9ekSOA/V/T5wbYLKoErX3pdLEPD2vsOn9SbYsv2lk2Cz
BHaIOpG0qRnUHwwxQsISqJqOVpT7tcL12WN/68MliNPaEaPM74DqZ84OWsTL
UBWeO/Z1twM0W0nfSdAsQ4TOi3BK4U7wz6ORO8uxDC2Do5n5lZ2w78RGnPl4
GZgXvlg8G+qCemapDzMpyxBqf6IxAN8L2kFN+i25y/BePdJmO6AXDkkUnuZW
LINfxN49k+leuLmqyv+5ZxnmF2YNS7z7IKTMcIWRYAUIOI7ZSJd+g+4zn5fK
qivgxeGdEToxCMctZxTv6azAXuvNGmapIQjHh2JsxisQNGNWdZg2BM3XYi+t
O63AyWNj8YKPw3B7N6vXK3MFhuhYr+ZxjwJhUM+DGuJVmKkl0SmZH4fj6EWd
DepVuFdiRmfANgGHKQSfmC+uQk8HQ2y95gRsV/Bkfry5CmtRhRXR3RMwu+hy
9o7qKujWjq0u/JqEFnGBocSUVZDc5LhXODgNv+TltrtyVkGqmWlXi2UG6tVe
UhKWr0JGSW1jr95/ufbOB7Q6V6H851kTsd0ZyImYSaA7XIWdx0FbUsxzEL4Z
8tZNbg0Wl8RTKaMWIORvmmueyhrYdhaa960tQCBZdczkizXwElaMDpFYBC+m
1Q7Mcg1EeRy5CTcWwV5WSmAvag2kZrU3elSW4VX87l/91TUYj40rqXy8BtoZ
p+lD99fgTa4HIVfBGtzUPMOgQ7gOf7sMlQYp14Fb/9otf4p1uJTD3cVotQ5X
7ZReLTOvg9i8sEOq7AbQ/0hrSJRZB3vh1T4c7Rac/XvxQbz8Otxdup9z8tEW
nH7s2RT7ZB3ifJtU3npswYkDg9YIzXVYmpwS5jmxDasyHN3+puuQoc1EG/Rn
G+rnv41+Cl8Ho4pH8sbUe1AlSqNtG70O53/pdbOp7EGZv8OETfw62MhdawiJ
3IMcoefT5unr0Ob0kbmUax9i3C8tGlSuA/P1LHvBJwdgzRm6ozy/DjDNRh7c
8AfMPhHbPFlZB8ZGrbP/LhzB2w7LfYXNdZDE3i9JGh+BznulP7JH69CpGiFo
cv4vPGqkIRSj2YAmtpNcbyyOgcPA6/QNoQ0Ydp2qWUsnwPf993skdt+AH6OF
9U+2T+KnFSgG3vn8pz95cihxmwi/uRfi2x+4AbREDyimTYnwVDJpB2nRG5AD
J2x514nwUvO9/6vhSsOhUNioQtZQUdYry2RChbEr75vMR13JniUaa7YWFVei
lCUSkZDqIknCjZ5SlptQKGRXkeyydcPsM8bt+vP9PM95nnPOj3P+ni6H58vg
Pcyy0mIJ4iuiVnTByDJIJa52I1EYW7qrdEWnlkFQU7y6J0wY+yNx5tzcMryu
jF6v/bcwLr13drCiLwOTcybE0lEEiUGxxJ8iVHhhTJI1SxHFO08G+s0MqPB6
Wu7HOvWNWGxPuf7IlAqlR0bSt13ciC848yCJVHjXdYS4rW8jdh/kK5s4RAWC
ZMfCcIIEisxrXkmmUEHEwfefBqYkRmnG7vqcQoWY0pA6Rtwm9CjTTDw7saYX
O8Q8wZNGeeV/uy/PUGGbwOYPXfoyOHSrRyH1BxVoeVmzb07KoHtU5LPHTCoc
iL76cN+4DLoebBkeFqVB5Pm61K7Oreg0402yItHAuqspw7VZFqU9DC45Ga/1
JstGrm+DHPZ1Cn/w3keD0fue5nPWcujwssIr2ooG/NkSCf90yqFdwmryMw8a
NAj0JkRNyKONWu6YQjwNKi1GnXuJSiieE6q1c62Hd5VVfj46r4TtohhhmEaD
wIC8Ts1GJTxE/S5mf4cGaVGqWrbHfkPrRn2jxHIacD+TTNTvKaPl8e7UpX4a
/C7j1b/7NxXce0/IrJlAh5E47mcxcXWU8GXWmGvRQUia/3mrhTqOa04bV+vQ
4VfX1IxIlDom1jYZlpnRobaqkk6YV8eewRi9DHs63M8v0vrWTcAAWfpOzxg6
3OUOLTnWaKDx2ETJp6t00HAovs7P0UCxkh4NuyQ6FAsvfbExIWKlUQXhQCYd
pMT4657VEXHFJVhl5xM68CjyBnOtOzE9a0yW0U8HyoCh8t5fWujj2ZVzaogO
e/jq23Yc1EYDQv3W2VE6VM4KLzRkauPQi3vSX+fXdmk66iiitQsJ/S5SjXwM
aA8wm9jisxtrN38UStVmwMhqxUTlBR2cvFnDVI9nwML6IIX1R0moV3xjPj6Z
AWNMDZekayS8+vfxkak0BmilnxaOribh9jnBlqJcBkits7KoUNBHLwuHLPUK
BqSUugd4zujjF/o8SX2IAa/k7zsX3DZEDbF6jfhRBtxdTtUO7DDECJUMhakp
BlC83s2WCRihjK0Rf9EiA370qE+VRhihw+O4XjVBJtw+GSZSSDHGDjfFMDUd
Juz/La3c8bApKpxZ9IszYELkvIiUXaopBic2uU6aMsGWUhX05aMpijwPxIdk
JqwazGGGnRn+T7xKUs2DCVXhEX81HtuLDfWHn6omMmHbeUkBmQxzfKF2eUFl
mAmPWSZKfdX7sUrw3nnCOBOcM/Nkvozux5czL1eJ35mgE7Zsqylkga/Kfkrq
LDFB1zK9qNrFAmtJXvrmAiwonR6bT+FY4JsD+2LctVlQx39CLsnWEhsIbhu8
dFmgUErMK4xaw0LhN70NWcAyzyRveWyJTe3lDwKRBZenph04fGR856jYEuHE
AkuDKeZsNRnbfFckMqNZ4H645dM3EytsJ2+7k32FBWqnahILQ6ywQ4OkcjeR
BTX52Yqtf1rhx4Vg0oN0FqhOX0zR47fG7nNDRyuK1vSufX9U1GuNA3E1Be0d
LLh1+a+46/GHcOzhH3oCSmz4vIVZYGRii/TBp4vnVNkwlX5ksiDGFoWlvpdP
arDX/MN8s5pscU+0k8ZbPTZs8PPZqG57BC856SpetWaDxMkJNsfADhUFFwT5
zrPhx5dcfOBtjzpmqm9PX2CDacPBpNAke7QMc4sdvcSGXCqnLKHCHkO+tXLr
k9nQtGr//OG/9lhbVbQYk8+GU+93EfIKHNAtwGtwpY0NBWTLBFG6I4bez8oO
6V7LS6u6yFR2wtjeDsevA2z4ZXTFx8TGCUvMzTprx9gwXRDg3/LICdlbZd9e
YLLBM2lcV8LTGbNbe8pZKhxw6mqOHx12wV4iOZYWyYE/lGS/Su1wxxzN5t4N
lzgg9P1Yv5u7Ox7TJhPk4zjQn6PUy3fTHWf2kNswlQMDzon6IRx35BmSpdMe
cOBnCcmgqdcDCWRyCbGNAx9Eb03z3fHESG9yt6cCF3hPV6Wyqym4z7dZNWw7
F3IjdK/qD1JwvT85PJ7Ahb4ZiV3iXAqmBpLly/Zwwdt08XbgXm8sPE32Yx/g
wpjRlhujb72xI4bMvhXKheWSJ0VbR3xQ+S55+/vXXEir0xKwtvBHyvyTmcYm
LogpuF9jBfljoalERV0rFzaZby6by/DHHV8/7avo4cI1d0mfnAl/3K0Y6JE9
zQWaI95QuxaAe/OuZ/ttXAG33clnXb+dQPfCLvF1nivQvnzFQ6kxGO9TSf1c
7xU4JUdOX1gOxhGLO/foASvgW7P/s4haCPpMUjRnz6zAgWSz08aJIRikTrXq
il8BhSBiRbBdKEYWS8f9Wb4CAbY2+TfoJzG71I1jwluBlHOXenLenMEF20F6
/joeKGmkvVg/dgaR5rokKMSD8Ss+gsV8YThv5jrTs4kHmdvbDudYhKH5R5eB
IA0erGK2yu4PYTi96Pgs14EH2lsy8y+On0V9A9sgTgkPhJ5uKCTsD8fkwY9+
x5+u8QFjsXZB4TgSc5jS/JwHfRcji95khGNSi83RjHoe9OuVuoROhuPw0d/J
O/t5sK7ar1P0egRCmk3Rvkke/P8P6D8IE01G
       "]]}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
    
    PlotRange->{{-2, 2}, {0., 368.193286611182}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.63199433683471*^9, 
  3.631994345173513*^9}},ExpressionUUID->"34ff0067-fd7d-4bc6-99ec-\
73c1c398c14a"]
}, Open  ]],

Cell["Coordinates of a hexagon:", "Text",
 CellChangeTimes->{{3.631994724525426*^9, 
  3.631994744781769*^9}},ExpressionUUID->"34ccbceb-73d8-40e5-8f9e-\
32bc315e9cea"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"2", "\[Pi]", " ", 
       RowBox[{"k", "/", "6"}]}], "]"}], ",", 
     RowBox[{"Sin", "[", 
      RowBox[{"2", "\[Pi]", " ", 
       RowBox[{"k", "/", "6"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "0", ",", "5"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics", "[", 
  RowBox[{"Polygon", "[", "%", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.631994709933313*^9, 
  3.631994736846384*^9}},ExpressionUUID->"5f1f7ef6-1bb7-4c65-b8d7-\
1bd384e5fea7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox[
      SqrtBox["3"], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     FractionBox[
      SqrtBox["3"], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox[
       SqrtBox["3"], "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     RowBox[{"-", 
      FractionBox[
       SqrtBox["3"], "2"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.631994716372748*^9, 
  3.631994737127327*^9}},ExpressionUUID->"30fd3ad4-1728-4672-96ff-\
7bbec6b31bfe"],

Cell[BoxData[
 GraphicsBox[
  PolygonBox[
   NCache[{{1, 0}, {Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
     Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {-1, 0}, {
     Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
     Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{1, 0}, {0.5, 
     0.8660254037844386}, {-0.5, 0.8660254037844386}, {-1, 
     0}, {-0.5, -0.8660254037844386}, {
     0.5, -0.8660254037844386}}]]]], "Output",
 CellChangeTimes->{{3.631994716372748*^9, 
  3.6319947371339483`*^9}},ExpressionUUID->"7066b709-c8bf-4f38-b30b-\
253595ccfc97"]
}, Open  ]],

Cell["Pictures of polygons:", "Text",
 CellChangeTimes->{{3.6319947494868593`*^9, 
  3.631994762526636*^9}},ExpressionUUID->"d8e8f62f-3dff-4c3f-a235-\
6cef8d5d2d2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{"Polygon", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"2", "\[Pi]", " ", 
           RowBox[{"k", "/", "i"}]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", "\[Pi]", " ", 
           RowBox[{"k", "/", "i"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "0", ",", 
         RowBox[{"i", "-", "1"}]}], "}"}]}], "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6319946547404003`*^9, 
  3.6319946981723747`*^9}},ExpressionUUID->"39797a25-ba9c-4147-9018-\
16e5c2862c28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
       Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{1, 0}, {-0.5, 
       0.8660254037844386}, {-0.5, -0.8660254037844386}}]]], ",", 
   GraphicsBox[PolygonBox[{{1, 0}, {0, 1}, {-1, 0}, {0, -1}}]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {
       Rational[1, 4] (-1 + 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (-1 - 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (-1 - 5^
         Rational[1, 2]), -(Rational[5, 8] + 
          Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (-1 + 
         5^Rational[1, 2]), -(Rational[5, 8] + 
          Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}}, {{1, 0}, {
       0.30901699437494745`, 0.9510565162951535}, {-0.8090169943749475, 
       0.5877852522924731}, {-0.8090169943749475, -0.5877852522924731}, {
       0.30901699437494745`, -0.9510565162951535}}]]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
       Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {-1, 0}, {
       Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
       Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{1, 0}, {0.5, 
       0.8660254037844386}, {-0.5, 0.8660254037844386}, {-1, 
       0}, {-0.5, -0.8660254037844386}, {0.5, -0.8660254037844386}}]]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {
       Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
        Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
        Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
        Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {-
        Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
       Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}}, {{1, 0}, {
       0.6234898018587335, 0.7818314824680298}, {-0.2225209339563144, 
       0.9749279121818236}, {-0.9009688679024191, 
       0.4338837391175581}, {-0.9009688679024191, -0.4338837391175581}, \
{-0.2225209339563144, -0.9749279121818236}, {
       0.6234898018587335, -0.7818314824680298}}]]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 
       1}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}, {-1, 
       0}, {-2^Rational[-1, 2], -2^Rational[-1, 2]}, {0, -1}, {
       2^Rational[-1, 2], -2^Rational[-1, 2]}}, {{1, 0}, {0.7071067811865475, 
       0.7071067811865475}, {0, 1}, {-0.7071067811865475, 
       0.7071067811865475}, {-1, 
       0}, {-0.7071067811865475, -0.7071067811865475}, {0, -1}, {
       0.7071067811865475, -0.7071067811865475}}]]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {Cos[Rational[2, 9] Pi], Sin[Rational[2, 9] Pi]}, {
       Sin[Rational[1, 18] Pi], Cos[Rational[1, 18] Pi]}, {
       Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {-
        Cos[Rational[1, 9] Pi], Sin[Rational[1, 9] Pi]}, {-
        Cos[Rational[1, 9] Pi], -Sin[Rational[1, 9] Pi]}, {
       Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
       Sin[Rational[1, 18] Pi], -Cos[Rational[1, 18] Pi]}, {
       Cos[Rational[2, 9] Pi], -Sin[Rational[2, 9] Pi]}}, {{1, 0}, {
       0.766044443118978, 0.6427876096865393}, {0.17364817766693033`, 
       0.984807753012208}, {-0.5, 0.8660254037844386}, {-0.9396926207859084, 
       0.3420201433256687}, {-0.9396926207859084, -0.3420201433256687}, \
{-0.5, -0.8660254037844386}, {0.17364817766693033`, -0.984807753012208}, {
       0.766044443118978, -0.6427876096865393}}]]], ",", 
   GraphicsBox[
    PolygonBox[
     NCache[{{1, 0}, {
       Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (-1 + 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (1 - 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (-1 - 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {-1, 0}, {
       Rational[1, 4] (-1 - 5^
         Rational[1, 2]), -(Rational[5, 8] + 
          Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (1 - 5^
         Rational[1, 2]), -(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {
       Rational[1, 4] (-1 + 
         5^Rational[1, 2]), -(Rational[5, 8] + 
          Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       Rational[1, 4] (1 + 
         5^Rational[1, 2]), -(Rational[5, 8] + 
          Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}}, {{1, 0}, {
       0.8090169943749475, 0.5877852522924731}, {0.30901699437494745`, 
       0.9510565162951535}, {-0.30901699437494745`, 
       0.9510565162951535}, {-0.8090169943749475, 0.5877852522924731}, {-1, 
       0}, {-0.8090169943749475, -0.5877852522924731}, \
{-0.30901699437494745`, -0.9510565162951535}, {
       0.30901699437494745`, -0.9510565162951535}, {
       0.8090169943749475, -0.5877852522924731}}]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.631994698586508*^9},ExpressionUUID->"19d6a707-c5a4-4209-8c3a-\
08f5decb0487"]
}, Open  ]],

Cell["Colors:", "Text",
 CellChangeTimes->{{3.631994593862688*^9, 
  3.63199459505407*^9}},ExpressionUUID->"ec0342eb-80ab-4ed9-b5da-\
74276522b079"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}], "[", "x", "]"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1", ",", ".1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631994355359915*^9, 3.631994383643722*^9}, {
  3.631994445528069*^9, 
  3.631994465432083*^9}},ExpressionUUID->"91f8e82a-9154-45e7-970d-\
56f433df99a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.471412, 0.108766, 0.527016], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3142746666666667, 0.07251066666666667, 0.35134400000000005`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.471412, 0.108766, 0.527016]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.471412, 0.108766, 0.527016]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.471412, 0.108766, 0.527016],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.18324053333333334`, 0.12150906666666669`, 0.48485253333333334`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.2748608, 0.18226360000000003, 0.7272788]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.2748608, 0.18226360000000003`, 0.7272788],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.2484884, 0.3863264, 0.813373], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.16565893333333334`, 0.25755093333333334`, 0.5422486666666667],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.2484884, 0.3863264, 0.813373]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.2484884, 0.3863264, 0.813373]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.2484884, 0.3863264, 0.813373],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.19863973333333337`, 0.3771952, 0.5014924000000001],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.29795960000000005, 0.5657928, 0.7522386]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.29795960000000005`, 0.5657928, 0.7522386],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.2588165333333334, 0.4494633333333333, 0.4023624],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.38822480000000004, 0.674195, 0.6035436]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.38822480000000004`, 0.674195, 0.6035436]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.38822480000000004`, 0.674195, 0.6035436],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.513417, 0.72992, 0.440682], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.342278, 0.48661333333333334`, 0.29378800000000005`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.513417, 0.72992, 0.440682]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.513417, 0.72992, 0.440682]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.513417, 0.72992, 0.440682],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.44405546666666684`, 0.4953612, 0.21529026666666662`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.8083416, 0.7110806, 0.255976], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5388944, 0.47405373333333334`, 0.17065066666666667`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.8083416, 0.7110806, 0.255976]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.8083416, 0.7110806, 0.255976]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.8083416, 0.7110806, 0.255976],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5956757333333333, 0.4002766666666666, 0.14703093333333334`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.8935136, 0.6004149999999999, 0.2205464]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.8935136, 0.6004149999999999, 0.2205464]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.8935136, 0.6004149999999999, 0.2205464],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5953030666666668, 0.25977439999999996`, 0.11960053333333334`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.8929546, 0.38966159999999994, 0.1794008]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.8929546, 0.38966159999999994`, 0.1794008],
    Editable->False,
    Selectable->False], ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      RowBox[{
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.857359, 0.131106, 0.132128], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5715726666666667, 0.08740400000000001, 0.08808533333333333],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None], "\[InvisibleSpace]"}],
      "RGBColor[0.857359, 0.131106, 0.132128]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = 
         RGBColor[0.857359, 0.131106, 0.132128]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[0.857359, 0.131106, 0.132128],
    Editable->False,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6319944659775553`*^9},ExpressionUUID->"082bb364-c215-42af-8b60-\
a5a56b406420"]
}, Open  ]],

Cell["The Periodic Table of the Elements:", "Text",
 CellChangeTimes->{{3.631994598062811*^9, 
  3.6319946256874638`*^9}},ExpressionUUID->"f73a8197-2138-4c56-9e50-\
455bcc266dd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ElementData", "[", 
    RowBox[{"i", ",", "\"\<Abbreviation\>\""}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6319944967560883`*^9, 3.631994501298546*^9}, {
  3.631994537934186*^9, 
  3.631994552596271*^9}},ExpressionUUID->"c3dd38cc-b36b-4775-93a8-\
d9c7a8de4ce6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"H\"\>", ",", "\<\"He\"\>", ",", "\<\"Li\"\>", 
   ",", "\<\"Be\"\>", ",", "\<\"B\"\>", ",", "\<\"C\"\>", ",", "\<\"N\"\>", 
   ",", "\<\"O\"\>", ",", "\<\"F\"\>", ",", "\<\"Ne\"\>", ",", "\<\"Na\"\>", 
   ",", "\<\"Mg\"\>", ",", "\<\"Al\"\>", ",", "\<\"Si\"\>", ",", "\<\"P\"\>", 
   ",", "\<\"S\"\>", ",", "\<\"Cl\"\>", ",", "\<\"Ar\"\>", ",", "\<\"K\"\>", 
   ",", "\<\"Ca\"\>", ",", "\<\"Sc\"\>", ",", "\<\"Ti\"\>", ",", "\<\"V\"\>", 
   ",", "\<\"Cr\"\>", ",", "\<\"Mn\"\>", ",", "\<\"Fe\"\>", ",", "\<\"Co\"\>",
    ",", "\<\"Ni\"\>", ",", "\<\"Cu\"\>", ",", "\<\"Zn\"\>", 
   ",", "\<\"Ga\"\>", ",", "\<\"Ge\"\>", ",", "\<\"As\"\>", ",", "\<\"Se\"\>",
    ",", "\<\"Br\"\>", ",", "\<\"Kr\"\>", ",", "\<\"Rb\"\>", 
   ",", "\<\"Sr\"\>", ",", "\<\"Y\"\>", ",", "\<\"Zr\"\>", ",", "\<\"Nb\"\>", 
   ",", "\<\"Mo\"\>", ",", "\<\"Tc\"\>", ",", "\<\"Ru\"\>", ",", "\<\"Rh\"\>",
    ",", "\<\"Pd\"\>", ",", "\<\"Ag\"\>", ",", "\<\"Cd\"\>", 
   ",", "\<\"In\"\>", ",", "\<\"Sn\"\>", ",", "\<\"Sb\"\>", ",", "\<\"Te\"\>",
    ",", "\<\"I\"\>", ",", "\<\"Xe\"\>", ",", "\<\"Cs\"\>", ",", "\<\"Ba\"\>",
    ",", "\<\"La\"\>", ",", "\<\"Ce\"\>", ",", "\<\"Pr\"\>", 
   ",", "\<\"Nd\"\>", ",", "\<\"Pm\"\>", ",", "\<\"Sm\"\>", ",", "\<\"Eu\"\>",
    ",", "\<\"Gd\"\>", ",", "\<\"Tb\"\>", ",", "\<\"Dy\"\>", 
   ",", "\<\"Ho\"\>", ",", "\<\"Er\"\>", ",", "\<\"Tm\"\>", ",", "\<\"Yb\"\>",
    ",", "\<\"Lu\"\>", ",", "\<\"Hf\"\>", ",", "\<\"Ta\"\>", ",", "\<\"W\"\>",
    ",", "\<\"Re\"\>", ",", "\<\"Os\"\>", ",", "\<\"Ir\"\>", 
   ",", "\<\"Pt\"\>", ",", "\<\"Au\"\>", ",", "\<\"Hg\"\>", ",", "\<\"Tl\"\>",
    ",", "\<\"Pb\"\>", ",", "\<\"Bi\"\>", ",", "\<\"Po\"\>", 
   ",", "\<\"At\"\>", ",", "\<\"Rn\"\>", ",", "\<\"Fr\"\>", ",", "\<\"Ra\"\>",
    ",", "\<\"Ac\"\>", ",", "\<\"Th\"\>", ",", "\<\"Pa\"\>", ",", "\<\"U\"\>",
    ",", "\<\"Np\"\>", ",", "\<\"Pu\"\>", ",", "\<\"Am\"\>", 
   ",", "\<\"Cm\"\>", ",", "\<\"Bk\"\>", ",", "\<\"Cf\"\>", ",", "\<\"Es\"\>",
    ",", "\<\"Fm\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.631994554622756*^9},ExpressionUUID->"740c6878-3c6d-484a-8cca-\
3d8cccf0b669"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comprehension Questions:", "Section",
 CellChangeTimes->{{3.474483892077592*^9, 3.474483902448202*^9}, {
   3.474484348831203*^9, 3.474484352335434*^9}, {3.474484561072112*^9, 
   3.474484579531193*^9}, 3.630716709767518*^9, {3.63071827711934*^9, 
   3.630718278157937*^9}, 
   3.631227344293664*^9},ExpressionUUID->"76bdaf1e-b2ce-492a-948a-\
48b348d91f78"],

Cell[CellGroupData[{

Cell[TextData[{
 "3. For each of the following ",
 StyleBox["Table", "Input",
  FontSize->16],
 " commands, complete the following sub-questions.\n(a) ",
 StyleBox["BEFORE EVALUATING THE COMMAND",
  FontColor->RGBColor[1, 0, 0]],
 ", what list do you expect the command to give?  Or do you expect an error?\n\
(b) Now, evaluate the command.  Did it do what you expect it to do?\n(c) If \
not, figure out what went wrong with your reasoning."
}], "Subsection",
 CellChangeTimes->{
  3.631989980444563*^9, {3.6319904232581453`*^9, 3.631990423569969*^9}, {
   3.6319908662166853`*^9, 
   3.631990866839387*^9}},ExpressionUUID->"5c998328-9aba-46e6-b770-\
35738b7162df"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"s", ",", "7", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4744864098173647`*^9, 
  3.474486455577729*^9}},ExpressionUUID->"3631a708-e893-469b-9e65-\
257bfa199a15"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "5", ",", "7"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.474484185891532*^9, 3.474484202969082*^9}, {
  3.474484817334012*^9, 3.4744848742344723`*^9}, {3.631990796769084*^9, 
  3.631990804004953*^9}},ExpressionUUID->"52f916eb-a936-4ad8-9ebb-\
c58c3c2a1a58"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"xy", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "5", ",", "7"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631990812946913*^9, 
  3.6319908161699*^9}},ExpressionUUID->"824cf04c-c9bf-4ef7-92a0-ff350ba14e23"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"x", "^", "n"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631994401672801*^9, 
  3.631994422968281*^9}},ExpressionUUID->"a0993d1e-bc10-45bf-8006-\
7f708d331b77"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"CountryData", "[", 
    RowBox[{"country", ",", "\"\<Population\>\""}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"country", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<France\>\"", ",", "\"\<United States\>\"", ",", "\"\<China\>\""}], 
      "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631994900551252*^9, 
  3.631994937176401*^9}},ExpressionUUID->"9a9ef8b1-b983-4afe-9c50-\
b296e3a2e78a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "4. Create the table of possibilities of what happens when you roll two \
six-sided dice.  \nWhat is their sum?  What is their product?  Evaluate and \
use these provided ",
 StyleBox["Table", "Input",
  FontSize->16],
 " commands:"
}], "Subsection",
 CellChangeTimes->{{3.461414013079324*^9, 3.461414014943383*^9}, {
  3.4744866015987577`*^9, 3.474486628243909*^9}, {3.505491607614393*^9, 
  3.50549161560664*^9}, {3.631990428482176*^9, 3.63199042861685*^9}, {
  3.631990829389476*^9, 3.631990843390134*^9}, {3.631997030088902*^9, 
  3.6319970306798677`*^9}},ExpressionUUID->"b2b82e9c-4484-4e30-acda-\
73a7479f8cb1"],

Cell[BoxData[{
 RowBox[{"AddDice", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "+", "j"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "6"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"MultDice", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "*", "j"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "6"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.4614140170485163`*^9, 3.461414050918786*^9}, {
  3.461414084623248*^9, 3.461414134867919*^9}, {3.4744866308549337`*^9, 
  3.4744866404940643`*^9}},ExpressionUUID->"a0b16be0-e360-44bf-92be-\
ec634425ce06"],

Cell[TextData[{
 "Does this do what you expect?  Now use ",
 StyleBox["TableForm", "Input"],
 " to output ",
 StyleBox["AddDice", "Input"],
 " and ",
 StyleBox["MultDice", "Input"],
 " in a more readable format."
}], "Text",
 CellChangeTimes->{{3.461414266332923*^9, 
  3.461414326463789*^9}},ExpressionUUID->"872dba1f-46bd-4291-bace-\
6c54958a0169"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Useful list commands", "Section",
 CellChangeTimes->{{3.474489911475842*^9, 3.474489920970047*^9}, 
   3.6319901719331408`*^9},ExpressionUUID->"05f39dd3-536a-4a83-a799-\
03aac5c8b25a"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Length", "Input",
 FontSize->18]], "Subsection",
 CellChangeTimes->{{3.63198989311068*^9, 3.631989918455018*^9}, 
   3.6319902195516987`*^9},ExpressionUUID->"1984c933-d9ca-4b09-beaa-\
5814655172d2"],

Cell[TextData[{
 StyleBox["Length", "Input"],
 " will tell you how many elements there are in the list. "
}], "Text",
 CellChangeTimes->{{3.474492198321375*^9, 3.474492238318803*^9}, {
  3.631990206056616*^9, 
  3.631990210943842*^9}},ExpressionUUID->"22662719-c8d6-41d3-95c2-\
a9acf7b695c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.474492247981052*^9, 
  3.474492250368298*^9}},ExpressionUUID->"b6832bff-ef8b-4fba-8c27-\
81be59a23a07"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{
  3.4744922510974894`*^9},ExpressionUUID->"25538e40-6a61-4a3f-8f1e-\
df166b724401"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744922535624857`*^9, 
  3.474492265561214*^9}},ExpressionUUID->"eb4c8054-4cc7-45b1-9fef-\
e21d7ff9d39d"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.4744922661179533`*^9},ExpressionUUID->"8b1a805c-928d-4b88-9df2-\
626f9feafa0d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Total", "Input",
 FontSize->18]], "Subsection",
 CellChangeTimes->{{3.631990221208707*^9, 
  3.631990222799707*^9}},ExpressionUUID->"be6ef1da-8b75-4f18-b738-\
369df1cb61cd"],

Cell[TextData[{
 StyleBox["Total", "Input"],
 " will sum the values in the list."
}], "Text",
 CellChangeTimes->{{3.631990214256074*^9, 
  3.6319902165914183`*^9}},ExpressionUUID->"7e70d1b3-4780-45e1-96c6-\
394230275607"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.474490837850746*^9, 3.474490838644116*^9}, {
  3.4744922718606653`*^9, 
  3.474492275280459*^9}},ExpressionUUID->"58cd249a-5de7-474f-98b8-\
ad5830b3936c"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.4744922757647047`*^9},ExpressionUUID->"79c0ee3f-0c20-4a61-9710-\
6351a52b7c3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"powersOfTen", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"10", "^", "i"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.474492277305998*^9, 3.47449232435461*^9}, {
  3.47449445142665*^9, 
  3.474494460080262*^9}},ExpressionUUID->"89a7a032-faf6-43bc-b1fc-\
8a7ff3d4cb47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.474494463018578*^9, 
  3.63199691003901*^9},ExpressionUUID->"3ea2385f-38ab-4e87-9a09-b5c25b74d151"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", "powersOfTen", "]"}]], "Input",
 CellChangeTimes->{{3.474492277305998*^9, 3.47449232435461*^9}, {
  3.47449445142665*^9, 
  3.474494460080262*^9}},ExpressionUUID->"0ac209cb-4253-4a7c-b2e1-\
bb1b784c25c6"],

Cell[BoxData["111111"], "Output",
 CellChangeTimes->{{3.474492320029183*^9, 3.47449232486385*^9}, {
  3.4744944527554197`*^9, 
  3.474494465868554*^9}},ExpressionUUID->"385ff189-287d-438d-8ddc-\
ca4637db5c86"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Flatten", "Input",
 FontSize->18]], "Subsection",
 CellChangeTimes->{{3.4744949673561172`*^9, 3.474494969760635*^9}, {
  3.569597171939273*^9, 
  3.569597177083108*^9}},ExpressionUUID->"2ee91ce7-cf5a-40c1-9eb7-\
6ed891d49559"],

Cell[TextData[{
 "When there are nested lists and you would like to remove some of the extra \
braces, you should use ",
 StyleBox["Flatten", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.474494979503089*^9, 3.47449498305715*^9}, {
  3.474495027786866*^9, 3.474495077467697*^9}, {3.474495227398424*^9, 
  3.474495258300372*^9}},ExpressionUUID->"b3199e78-8f03-4517-8f82-\
0e0b6731aecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"x", "*", "y"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.474495123267811*^9},ExpressionUUID->"866a4fa3-8149-40ce-9750-\
f0ef13dfd86e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4744951236390038`*^9},ExpressionUUID->"b37a2e51-41e0-4e8f-b907-\
305a188eac94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "list", "]"}]], "Input",
 CellChangeTimes->{{3.474495125774157*^9, 
  3.474495130211068*^9}},ExpressionUUID->"108b07f4-ef11-47f4-8d1e-\
51e5122ca6a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "2", ",", "4", ",", "6", ",", "3", ",", "6", 
   ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{
  3.4744951307290688`*^9},ExpressionUUID->"d8043855-1a77-471f-a6aa-\
34a9005e1256"]
}, Open  ]],

Cell["\<\
You can also specify how many layers of braces you want to remove. \
\>", "Text",
 CellChangeTimes->{{3.474495269546907*^9, 
  3.474495272291584*^9}},ExpressionUUID->"dc6a77f7-4e59-4bb3-8be8-\
6d09506265e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list2", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.474495180319796*^9, 
  3.474495207596547*^9}},ExpressionUUID->"61ceda45-34e4-436d-b8bc-\
a0f60139d7fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4744952081345253`*^9},ExpressionUUID->"8d8d2668-cb93-4726-afa4-\
472b79cefd08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "list2", "]"}]], "Input",
 CellChangeTimes->{{3.474495210218232*^9, 
  3.474495215291491*^9}},ExpressionUUID->"c1aaac9c-b46c-4cf6-a3cc-\
980b64b86a9c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", ",", "1", 
   ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", 
   "2", ",", "3", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474495215713972*^9},ExpressionUUID->"4b0d7bee-0c28-47b2-8afe-\
be8ef805596a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"list2", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.474495216874704*^9, 
  3.4744952212277184`*^9}},ExpressionUUID->"58dadfda-d8d6-45be-98af-\
fd8f7b133b37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4744952216315327`*^9},ExpressionUUID->"c7494757-6741-4fff-8f10-\
6c755b577f2c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Prepend", "Input",
  FontSize->24],
 " and ",
 StyleBox["Append", "Input",
  FontSize->24]
}], "Section",
 CellChangeTimes->{{3.631990288914032*^9, 3.631990309843096*^9}, 
   3.63199698963204*^9},ExpressionUUID->"76124fb8-72d4-4b33-8184-\
ec2d7bd21bc7"],

Cell[TextData[{
 "When you want to add elements to the end of a preexisting list, use ",
 StyleBox["Append", "Input",
  FontSize->14],
 ".  To add elements to the beginning, use ",
 StyleBox["Prepend", "Input",
  FontSize->14],
 ".\nThis is often used in conjunction with redefining the preexisting list."
}], "Text",
 CellChangeTimes->{{3.474495283915002*^9, 3.4744953491324787`*^9}, {
  3.631996858430925*^9, 
  3.631996873008376*^9}},ExpressionUUID->"e99a5088-d42a-40c6-8e5e-\
b39251badbbe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"powersOfTen", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"10", "^", "i"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4744953593058453`*^9, 3.474495362101856*^9}, 
   3.631996917581102*^9},ExpressionUUID->"5e5ab5c2-f2cd-48f2-9eb9-\
70e08d1c2268"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.474495362705955*^9, 
  3.6319969187235107`*^9},ExpressionUUID->"fefa36c5-30ee-475d-8b79-\
5d0036b92c1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"powersOfTen", ",", 
   RowBox[{"10", "^", "6"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4744953641353807`*^9, 
  3.47449538011943*^9}},ExpressionUUID->"063b8868-08fd-48c7-8a47-\
b1b10c937e4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000", ",", 
   "1000000"}], "}"}]], "Output",
 CellChangeTimes->{3.474495380880953*^9, 
  3.6319969202908792`*^9},ExpressionUUID->"c64ca62a-3b54-4f71-9b90-\
cb3ffea2b989"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["powersOfTen"], "Input",
 CellChangeTimes->{{3.474491330850898*^9, 3.474491331541534*^9}, {
  3.474495423866661*^9, 
  3.474495428462948*^9}},ExpressionUUID->"155f11bd-c15c-4530-8288-\
609b693a2c24"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.474495428888419*^9, 
  3.631996921627779*^9},ExpressionUUID->"5ab7d5ca-5e51-4e34-9dab-\
097e392f8570"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prepend", "[", 
  RowBox[{"powersOfTen", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.6319969009199953`*^9, 
  3.631996905530341*^9}},ExpressionUUID->"ec7e109d-b6c3-414b-a4f7-\
ecabad0180b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", 
   "100000"}], "}"}]], "Output",
 CellChangeTimes->{{3.631996905991891*^9, 
  3.631996923262869*^9}},ExpressionUUID->"fb2d74df-13b9-4296-981c-\
b71d354b9ecf"]
}, Open  ]],

Cell[TextData[{
 "You can see that ",
 StyleBox["powersOfTen", "Input"],
 " ",
 StyleBox["does not change",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 " when using ",
 StyleBox["Append", "Input"],
 " or ",
 StyleBox["Prepend", "Input"],
 ". \nYou need to ",
 StyleBox["redefine",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 " ",
 StyleBox["powersOfTen", "Input"],
 " if you want to actually add an entry to the list for future use.  "
}], "Text",
 CellChangeTimes->{{3.474495456680298*^9, 3.474495597880084*^9}, {
  3.631996929603965*^9, 
  3.631996935515082*^9}},ExpressionUUID->"5e50be85-eb33-4340-92d5-\
73857c78abd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"powersOfTen", "=", 
  RowBox[{"Append", "[", 
   RowBox[{"powersOfTen", ",", 
    RowBox[{"10", "^", "6"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4744954316112137`*^9, 
  3.474495440315319*^9}},ExpressionUUID->"4f34d427-dd67-4d89-8a18-\
9eaf8e7cb25b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000", ",", 
   "1000000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474495441329708*^9},ExpressionUUID->"85e459db-b7f7-4055-bba2-\
115d475cede5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["powersOfTen"], "Input",
 CellChangeTimes->{{3.474495442599738*^9, 
  3.474495446727344*^9}},ExpressionUUID->"983e8f47-ee8e-45d0-841e-\
af899a25c37d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "100", ",", "1000", ",", "10000", ",", "100000", ",", 
   "1000000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474495447220476*^9},ExpressionUUID->"33d19b1c-68b9-4cf6-bbc9-\
b5725bdbbb20"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accessing parts of lists", "Section",
 CellChangeTimes->{{3.631988383417486*^9, 
  3.6319883894967823`*^9}},ExpressionUUID->"122ef3bc-b026-4fa1-bb7b-\
b335e7bcd2ac"],

Cell[TextData[{
 "It is often useful to single out one or more of the entries of a list.  For \
this we use double square brackets ",
 StyleBox["[[n]]", "Input"],
 ", (same as ",
 StyleBox["Part", "Input"],
 ")."
}], "Text",
 CellChangeTimes->{{3.4744923678970137`*^9, 3.4744924231216*^9}, {
  3.474494182632859*^9, 3.474494237877928*^9}, {3.474494364560281*^9, 
  3.474494366855001*^9}},ExpressionUUID->"85ea4728-9242-485c-8ef8-\
f63ee47276c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"powersOfTen", "[", 
  RowBox[{"[", "5", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744945050101423`*^9, 
  3.474494518584363*^9}},ExpressionUUID->"fe26a79e-cbe7-407c-b227-\
fdd36f53e28e"],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{
  3.474494518991064*^9},ExpressionUUID->"3f6779ea-74ad-4ce6-bfdd-\
d1baadf0a807"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"powersOfTen", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.474494525709506*^9, 3.47449453096253*^9}, {
  3.474494752227016*^9, 3.4744947545861273`*^9}, {3.47449478871983*^9, 
  3.474494790045806*^9}},ExpressionUUID->"aaf84b04-dcf6-4930-a2ce-\
23f135427c7d"],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{3.474494531435083*^9, 3.4744947551710653`*^9, 
  3.47449479030905*^9},ExpressionUUID->"349bbde4-3b80-474a-9faf-a0d7c1cd6580"]
}, Open  ]],

Cell["\<\
When the list is a nested list, you can reference an entry (a sublist) or \
even an entry of the sublist.\
\>", "Text",
 CellChangeTimes->{{3.474494726057616*^9, 3.474494742199374*^9}, {
  3.474494812266062*^9, 3.474494817728232*^9}, {3.4744948668012867`*^9, 
  3.4744949138570433`*^9}},ExpressionUUID->"2b18259a-80aa-4870-8329-\
d6ff32731d96"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nestedList", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.474489929661419*^9, 3.4744899316010427`*^9}, {
  3.474494251262022*^9, 3.4744942906482687`*^9}, {3.4744943238258963`*^9, 
  3.4744943506173353`*^9}, {3.474494387874166*^9, 3.474494403221265*^9}, {
  3.4744944739398108`*^9, 
  3.474494494243388*^9}},ExpressionUUID->"6fc48e85-e94a-4ae0-be57-\
61b11b5713f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.474489929661419*^9, 3.4744899316010427`*^9}, {
  3.474494251262022*^9, 3.4744942906482687`*^9}, {3.4744943238258963`*^9, 
  3.4744943506173353`*^9}, {3.474494387874166*^9, 3.474494403221265*^9}, {
  3.4744944970423098`*^9, 
  3.47449450106649*^9}},ExpressionUUID->"aea4f3b5-9503-4d25-9a0e-\
ce56478bdc28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{{3.474494284794404*^9, 3.474494291212757*^9}, {
   3.474494326894721*^9, 3.47449435265063*^9}, 3.474494397789956*^9, 
   3.474494538346415*^9, 
   3.4744949174703913`*^9},ExpressionUUID->"f8bbceb0-4348-47da-9ef3-\
721911845b1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.474494552317073*^9, 
  3.474494558877475*^9}},ExpressionUUID->"7caea5a3-58c4-440b-b730-\
ca2865e6b6a8"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.474494559537125*^9, 
  3.4744949184180403`*^9},ExpressionUUID->"7c8ada71-79eb-4bfc-8b69-\
4d52a6d46989"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comprehension Questions:", "Section",
 CellChangeTimes->{{3.474483892077592*^9, 3.474483902448202*^9}, {
  3.474484348831203*^9, 3.474484352335434*^9}, {3.474484561072112*^9, 
  3.474484579531193*^9}},ExpressionUUID->"96f505b3-57ed-4688-9623-\
13557c50a08d"],

Cell[CellGroupData[{

Cell["\<\
5. For each of the following commands, complete the following sub-questions.
(a) What list do you expect the command to give?  Or do you expect an error?
(b) Now evaluate the command.  Did it do what you expect it to do?
(c) If not, figure out what went wrong with your reasoning.\
\>", "Subsection",
 CellChangeTimes->{{3.4744839058009853`*^9, 3.474483917241971*^9}, {
   3.474484391473723*^9, 3.4744844748584013`*^9}, {3.474484512029057*^9, 
   3.474484551175448*^9}, {3.474484625810054*^9, 3.47448463157815*^9}, {
   3.474486398271454*^9, 3.474486403767619*^9}, 3.474486470834168*^9, {
   3.474486528697488*^9, 3.474486529135824*^9}, 3.474495622536669*^9, {
   3.474496203710246*^9, 3.4744962038314*^9}, {3.631996968461845*^9, 
   3.631996968901021*^9}, {3.6319970345289288`*^9, 
   3.631997035232066*^9}},ExpressionUUID->"ebbf6bd9-a965-4c64-ba13-\
d23e60365f37"],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744958570382032`*^9, 
  3.4744958670612383`*^9}},ExpressionUUID->"7f159b21-7aec-4e83-a6ba-\
30abf409674e"],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744829410382757`*^9, 3.474482960407786*^9}, {
  3.474483192069615*^9, 3.474483192381487*^9}, {3.4744834962495127`*^9, 
  3.474483496401009*^9}, {3.474483731387291*^9, 3.474483775931205*^9}, {
  3.474483876393428*^9, 3.4744838789576406`*^9}, {3.4744839448846197`*^9, 
  3.474483950650209*^9}, {3.474495657559054*^9, 
  3.4744956672794533`*^9}},ExpressionUUID->"7c475fdb-d313-4943-8f80-\
d2eb172986bb"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744958937771683`*^9, 
  3.474495901189478*^9}},ExpressionUUID->"cb1fcce0-5748-4128-a2da-\
6b0f2e26aa91"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.474495904375609*^9, 
  3.474495937850526*^9}},ExpressionUUID->"241a8304-dae0-4482-b6a1-\
5ec03f4e996e"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.474495941902165*^9, 
  3.4744959480951242`*^9}},ExpressionUUID->"dd06f50c-c1d6-4fa4-8f95-\
05dcd6c0d9bd"],

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "2"}], "}"}], ",", "3"}], "}"}], ",", 
    "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.4744960163869762`*^9, 3.474496032189958*^9}, {
  3.6319905274322147`*^9, 
  3.63199052847606*^9}},ExpressionUUID->"8c0c143a-22b1-46fe-b099-\
a27384691d89"],

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1", "}"}], ",", "2"}], "}"}], ",", "3"}], "}"}], ",", 
     "4"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.631990529489459*^9, 
  3.6319905399675703`*^9}},ExpressionUUID->"53e46e72-10b2-4d52-89ee-\
a4bcba890f71"],

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.474496074992799*^9, 
  3.4744960833804007`*^9}},ExpressionUUID->"c7d370fa-4fa4-4a84-bc02-\
6aaa24f870be"],

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "5", ",", "6"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.474496074992799*^9, 
  3.474496118837022*^9}},ExpressionUUID->"a04b185d-1e20-43aa-825f-\
afe3e0b6caac"],

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.474496074992799*^9, 
  3.474496130949871*^9}},ExpressionUUID->"776e799f-6471-4bcc-9381-\
098a6b5d2d47"],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"powersOfTen", ",", "6"}], "]"}]], "Input",
 CellChangeTimes->{{3.474494525709506*^9, 3.47449453096253*^9}, {
  3.474494752227016*^9, 3.4744947545861273`*^9}, {3.47449478871983*^9, 
  3.474494790045806*^9}, {3.474495975375778*^9, 
  3.474495981232107*^9}},ExpressionUUID->"f789d85e-e180-41a7-9c75-\
4bbcff33e007"],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"powersOfTen", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.474494525709506*^9, 3.47449453096253*^9}, {
  3.474494752227016*^9, 3.4744947545861273`*^9}, {3.47449478871983*^9, 
  3.474494790045806*^9}, {3.474495975375778*^9, 
  3.4744959947356043`*^9}},ExpressionUUID->"b942402d-97b9-4580-a489-\
102b975965a4"],

Cell["Discuss these answers with your neighbors.", "Text",
 CellChangeTimes->{{3.474483997753648*^9, 3.474484080781033*^9}, {
   3.4744842174309053`*^9, 3.474484243006421*^9}, {3.4744843880446157`*^9, 
   3.474484390329782*^9}, 
   3.474484554150144*^9},ExpressionUUID->"a5893420-eb86-4db7-9c10-\
9529a629d90f"]
}, Open  ]],

Cell["\<\
6. Consider rolling two dice and taking the sum of the values.  What is the \
average value for this sum?  What is the average value for the product of two \
rolled dice?  Three rolled dice?  Four?\
\>", "Subsection",
 CellChangeTimes->{{3.631990568137175*^9, 3.631990730321712*^9}, {
  3.631996972237975*^9, 3.6319969730609417`*^9}, {3.6319970367932243`*^9, 
  3.631997037253726*^9}},ExpressionUUID->"992c4483-b41c-47a8-8da2-\
b8396e0a1201"],

Cell[CellGroupData[{

Cell[TextData[{
 "7. Here are two lists which represent the x- and y-coordinates of points, \
and an incorrect ",
 StyleBox["Table", "Input"],
 " command that hopes to collect the points into a list of ordered x,y pairs. \
 Figure out what is wrong with the command and fix it."
}], "Subsection",
 CellChangeTimes->{{3.474496808533745*^9, 3.474496858535841*^9}, {
  3.4744968937087793`*^9, 3.474496899292835*^9}, {3.474496957023066*^9, 
  3.474497073477356*^9}, {3.474497108337942*^9, 3.47449716037097*^9}, {
  3.474497193459661*^9, 3.4744972798156433`*^9}, {3.631996974270013*^9, 
  3.6319969748290987`*^9}, {3.6319970384653063`*^9, 
  3.6319970388563967`*^9}},ExpressionUUID->"70cf217b-b4fe-43e8-aa02-\
c641e6c184e8"],

Cell[BoxData[{
 RowBox[{"x", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], "\n", 
 RowBox[{"y", "=", 
  RowBox[{"{", 
   RowBox[{"2", ",", "5", ",", "10", ",", "17", ",", "26"}], "}"}]}], "\n", 
 RowBox[{"points", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "i", "]"}], ",", 
      RowBox[{"y", "[", "i", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.4744969399227533`*^9, 3.474496944322524*^9}, {
  3.474497170981625*^9, 
  3.4744971863260193`*^9}},ExpressionUUID->"33de4312-b6a8-4f1e-8793-\
bff9527a2f36"],

Cell[CellGroupData[{

Cell["Solution:", "Subsubsection",
 CellChangeTimes->{{3.505491764014962*^9, 
  3.505491769226451*^9}},ExpressionUUID->"ff690a07-7ca9-400d-9b54-\
5d3f59feaae7"],

Cell["\<\
You need to use double brackets to reference parts of a list.\
\>", "Text",
 CellChangeTimes->{{3.505491788363369*^9, 
  3.505491808027687*^9}},ExpressionUUID->"3898589d-d0a8-4265-8ac0-\
c7cd566b4234"],

Cell[BoxData[
 RowBox[{"points", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", 
       RowBox[{"[", "i", "]"}], "]"}], ",", 
      RowBox[{"y", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.505491782207033*^9, 
  3.505491786302689*^9}},ExpressionUUID->"fd23f347-629b-452d-afe0-\
00a0eb066411"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1264, 661},
WindowMargins->{{4, Automatic}, {Automatic, 62}},
ShowSelection->True,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (July 17, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3631973708-3263596"->{
  Cell[24982, 692, 1005, 20, 69, "Print",ExpressionUUID->"b36b2096-9f68-436b-b9cb-f16a2bc1efaa",
   CellTags->"Info3631973708-3263596"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3631973708-3263596", 260478, 5643}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 447, 7, 101, "Title",ExpressionUUID->"48298fc7-2660-4fd4-8675-31aa0a9305ed"],
Cell[1017, 31, 505, 11, 57, "Subsubtitle",ExpressionUUID->"5d50180e-d392-4ee0-a78c-d5fe87d833f6"],
Cell[CellGroupData[{
Cell[1547, 46, 147, 3, 70, "Section",ExpressionUUID->"6a60c3c8-73d7-438e-ace7-0b68b70cd0f6"],
Cell[1697, 51, 653, 14, 30, "Text",ExpressionUUID->"7a8ded6f-5a00-42f3-bb34-7ebaaa516880"],
Cell[2353, 67, 257, 6, 30, "Text",ExpressionUUID->"90b86baf-80b9-4cfc-8c32-ae62704fe56f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2647, 78, 326, 10, 70, "Section",ExpressionUUID->"27f472de-893d-4515-bbf1-25bd41d85050"],
Cell[2976, 90, 320, 9, 36, "Text",ExpressionUUID->"10d2ef9d-dcd3-455d-bbd7-7b12ea2b37a1"],
Cell[CellGroupData[{
Cell[3321, 103, 209, 5, 30, "Input",ExpressionUUID->"6d9ad8f2-c417-41d1-99dd-3a0de5a62722"],
Cell[3533, 110, 209, 5, 30, "Output",ExpressionUUID->"d16ba5e3-e2d0-4ba1-b806-295360094ca7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3779, 120, 129, 3, 30, "Input",ExpressionUUID->"101851ef-3b75-4e85-91f3-7a52a7b37381"],
Cell[3911, 125, 209, 5, 30, "Output",ExpressionUUID->"0c06819e-408e-49de-9a1c-f82e43e424c3"]
}, Open  ]],
Cell[4135, 133, 308, 7, 30, "Text",ExpressionUUID->"87262e9d-94ec-47a8-89f7-c2378e9d52dd"],
Cell[4446, 142, 247, 6, 30, "Input",ExpressionUUID->"9bdd27b2-170d-41c6-b669-b1ccfd8a43a1"],
Cell[CellGroupData[{
Cell[4718, 152, 155, 3, 30, "Input",ExpressionUUID->"43bd3741-a138-427f-9f4c-dcebcafe29f9"],
Cell[4876, 157, 219, 5, 30, "Output",ExpressionUUID->"6b3a8457-ba20-4548-8f6e-03e9afcd1433"]
}, Open  ]],
Cell[5110, 165, 467, 12, 31, "Text",ExpressionUUID->"ce114402-7e87-465a-bee9-6bf646a8d402"],
Cell[5580, 179, 608, 12, 49, "Text",ExpressionUUID->"074c5a93-84a6-4fed-9de5-e8454cc06a0a"],
Cell[6191, 193, 351, 9, 30, "Input",ExpressionUUID->"89e4a95b-d6f8-416c-a149-0f951267928e"],
Cell[6545, 204, 385, 10, 30, "Input",ExpressionUUID->"e1c7321d-c8e1-478a-862f-6753e7f97f2f"],
Cell[6933, 216, 387, 9, 30, "Text",ExpressionUUID->"ca1a0523-3530-47d9-aafe-e00d58e66284"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7357, 230, 282, 9, 70, "Section",ExpressionUUID->"72ca3935-183f-4f8a-9fb4-b16fa4fe9b2a"],
Cell[7642, 241, 569, 12, 52, "Text",ExpressionUUID->"aa3fa9cd-a5b7-49c6-bfbb-5ac28cd4bb99"],
Cell[CellGroupData[{
Cell[8236, 257, 324, 9, 30, "Input",ExpressionUUID->"72acacee-8aeb-4421-9133-871669accddf"],
Cell[8563, 268, 1234, 19, 50, "Output",ExpressionUUID->"6b434e47-faa6-47f6-9f57-940ea8418e3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9834, 292, 240, 5, 30, "Input",ExpressionUUID->"b2da7f90-33f1-48c4-9731-abc080627064"],
Cell[10077, 299, 1328, 34, 242, "Output",ExpressionUUID->"669b76e2-2743-4bbb-ad5f-c40584db4f44"]
}, Open  ]],
Cell[11420, 336, 427, 8, 49, "Text",ExpressionUUID->"07d8a1db-a460-471b-9bfa-d590f30e4776"],
Cell[CellGroupData[{
Cell[11872, 348, 187, 4, 30, "Input",ExpressionUUID->"5961464f-e354-4846-b949-58051be37b58"],
Cell[12062, 354, 2586, 40, 71, "Message",ExpressionUUID->"8bb1bb49-b743-43a8-bf7e-7286ccb4d65d"],
Cell[14651, 396, 1364, 35, 78, "Output",ExpressionUUID->"4096c3d4-fa54-4423-96b4-b8df4c445917"]
}, Open  ]],
Cell[16030, 434, 647, 16, 52, "Text",ExpressionUUID->"3a5948dd-c74f-419e-8941-9ee70aecfdfc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16714, 455, 279, 8, 70, "Section",ExpressionUUID->"c3e6f30e-6bc9-4803-8f0c-5147b60c9527"],
Cell[16996, 465, 222, 4, 30, "Text",ExpressionUUID->"10c63353-bf72-4ca2-8544-354066d0abb5"],
Cell[CellGroupData[{
Cell[17243, 473, 377, 10, 30, "Input",ExpressionUUID->"fbf7be83-f1c1-49a4-b18c-46669e388877"],
Cell[17623, 485, 1157, 33, 50, "Output",ExpressionUUID->"f9b1a883-1ccd-4a09-a866-293e86573ede"]
}, Open  ]],
Cell[18795, 521, 353, 7, 30, "Text",ExpressionUUID->"da2a3c19-dc0c-4b7c-abb4-6dbc32a8b57e"],
Cell[CellGroupData[{
Cell[19173, 532, 369, 10, 30, "Input",ExpressionUUID->"286cc467-e5bb-45e9-b052-3dca7c48dca3"],
Cell[19545, 544, 1731, 37, 182, "Output",ExpressionUUID->"f5bb50c8-46ee-447d-9771-bc445cec331c"]
}, Open  ]],
Cell[21291, 584, 425, 13, 33, "Text",ExpressionUUID->"f6385d06-3d60-41b2-8456-019ce6d1c468"],
Cell[CellGroupData[{
Cell[21741, 601, 376, 11, 30, "Input",ExpressionUUID->"0fa944b6-d83d-436f-8f25-ed79e940712b"],
Cell[22120, 614, 1707, 37, 182, "Output",ExpressionUUID->"56e933e7-c544-4e17-aab5-4fa921e40a5f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23876, 657, 199, 3, 70, "Section",ExpressionUUID->"6906553d-7cc1-4312-bfa1-b1f7e0d1ff96"],
Cell[CellGroupData[{
Cell[24100, 664, 201, 3, 49, "Subsection",ExpressionUUID->"cb605073-71a8-43cf-b596-12c1279a79f8"],
Cell[24304, 669, 474, 13, 52, "Text",ExpressionUUID->"53fa7c1c-2012-4396-9f20-7ac0613d5633"],
Cell[CellGroupData[{
Cell[24803, 686, 176, 4, 30, "Input",ExpressionUUID->"ffa070d5-30e9-4ef3-9ca7-8e89b11df627"],
Cell[24982, 692, 1005, 20, 69, "Print",ExpressionUUID->"b36b2096-9f68-436b-b9cb-f16a2bc1efaa",
 CellTags->"Info3631973708-3263596"]
}, Open  ]],
Cell[26002, 715, 311, 9, 30, "Text",ExpressionUUID->"dd2d58ee-f085-4dc5-b6db-db2944cd2cd3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26350, 729, 214, 4, 49, "Subsection",ExpressionUUID->"93d63cd2-ec7f-45ec-8fa3-7d5ca718d0b9"],
Cell[26567, 735, 237, 4, 30, "Text",ExpressionUUID->"a96b0102-a5ca-407b-8171-225e2033efe6"],
Cell[CellGroupData[{
Cell[26829, 743, 176, 4, 30, "Input",ExpressionUUID->"757a1536-ba47-4827-abe9-e9de23260762"],
Cell[27008, 749, 131, 3, 30, "Output",ExpressionUUID->"c1c09e38-436d-417b-b992-a718a1eb5f96"]
}, Open  ]],
Cell[27154, 755, 343, 11, 31, "Text",ExpressionUUID->"a8b6b6b5-344f-4f83-9dd7-a79771e4cf79"],
Cell[CellGroupData[{
Cell[27522, 770, 282, 8, 30, "Input",ExpressionUUID->"b308dbda-3805-4475-8a8d-65e3a1994b88"],
Cell[27807, 780, 188, 5, 30, "Output",ExpressionUUID->"60246022-6364-4f8f-a31f-b81df716ff82"]
}, Open  ]],
Cell[28010, 788, 498, 16, 33, "Text",ExpressionUUID->"180ea204-b718-4d89-b7be-551213a24656"],
Cell[CellGroupData[{
Cell[28533, 808, 360, 10, 50, "Input",ExpressionUUID->"36e448c1-a2bd-4c1a-8341-35af1cfbae2a"],
Cell[28896, 820, 257, 8, 30, "Output",ExpressionUUID->"8feb1702-517d-409f-8695-fc4560489c30"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29202, 834, 198, 3, 49, "Subsection",ExpressionUUID->"a44c86b7-4bca-4f44-a060-92e03a57812f"],
Cell[29403, 839, 794, 23, 53, "Text",ExpressionUUID->"ecae3c3a-96fc-473f-a0f3-a4e9f6b7b58b"],
Cell[30200, 864, 395, 10, 30, "Input",ExpressionUUID->"5a0368ed-8418-4800-8f0a-8747c63d84d7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30644, 880, 363, 6, 70, "Section",ExpressionUUID->"42ed4b92-e5d8-47b8-9af4-58394038757b"],
Cell[31010, 888, 785, 21, 169, "Subsection",ExpressionUUID->"d96f944a-9505-44d3-9df8-bba3b41a9c5e"],
Cell[31798, 911, 559, 17, 41, "Subsection",ExpressionUUID->"63ad0855-9f4d-49e6-b46e-291f5c89892e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32394, 933, 339, 5, 70, "Section",ExpressionUUID->"b0daa3fe-e7e5-4c4b-8f6b-b4e0ae627d46"],
Cell[CellGroupData[{
Cell[32758, 942, 163, 3, 49, "Subsection",ExpressionUUID->"156fa89b-49c4-44eb-95aa-28f7101c9506"],
Cell[32924, 947, 775, 24, 49, "Text",ExpressionUUID->"9ba106f5-a76c-4bec-8f22-c6bc13df942c"],
Cell[CellGroupData[{
Cell[33724, 975, 390, 11, 30, "Input",ExpressionUUID->"dda4c85e-bbc5-4cb3-9048-ffbad1b70f32"],
Cell[34117, 988, 362, 11, 30, "Output",ExpressionUUID->"4cc40fe4-1422-4834-927b-33c24f6b6238"]
}, Open  ]],
Cell[34494, 1002, 247, 6, 30, "Text",ExpressionUUID->"b4d0c401-99bc-4293-a015-d38b05c847b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34778, 1013, 176, 3, 49, "Subsection",ExpressionUUID->"b49fc5a3-5f31-417a-af6d-d5d30b586499"],
Cell[34957, 1018, 491, 12, 30, "Text",ExpressionUUID->"e6afcabc-6873-4db8-b5a2-bb6db297a9bd"],
Cell[35451, 1032, 159, 3, 30, "Text",ExpressionUUID->"bf0b2813-9f58-4a5e-8607-6a6a8b3d617e"],
Cell[CellGroupData[{
Cell[35635, 1039, 436, 13, 30, "Input",ExpressionUUID->"0bd5e9ba-f291-4cc1-821f-77ef74565a31"],
Cell[36074, 1054, 162167, 2777, 444, "Output",ExpressionUUID->"34ff0067-fd7d-4bc6-99ec-73c1c398c14a"]
}, Open  ]],
Cell[198256, 3834, 167, 3, 30, "Text",ExpressionUUID->"34ccbceb-73d8-40e5-8f9e-32bc315e9cea"],
Cell[CellGroupData[{
Cell[198448, 3841, 610, 18, 50, "Input",ExpressionUUID->"5f1f7ef6-1bb7-4c65-b8d7-1bd384e5fea7"],
Cell[199061, 3861, 900, 34, 60, "Output",ExpressionUUID->"30fd3ad4-1728-4672-96ff-7bbec6b31bfe"],
Cell[199964, 3897, 587, 12, 328, "Output",ExpressionUUID->"7066b709-c8bf-4f38-b30b-253595ccfc97"]
}, Open  ]],
Cell[200566, 3912, 165, 3, 30, "Text",ExpressionUUID->"d8e8f62f-3dff-4c3f-a235-6cef8d5d2d2e"],
Cell[CellGroupData[{
Cell[200756, 3919, 777, 22, 30, "Input",ExpressionUUID->"39797a25-ba9c-4147-9018-16e5c2862c28"],
Cell[201536, 3943, 5433, 104, 437, "Output",ExpressionUUID->"19d6a707-c5a4-4209-8c3a-08f5decb0487"]
}, Open  ]],
Cell[206984, 4050, 148, 3, 30, "Text",ExpressionUUID->"ec0342eb-80ab-4ed9-b5da-74276522b079"],
Cell[CellGroupData[{
Cell[207157, 4057, 411, 11, 30, "Input",ExpressionUUID->"91f8e82a-9154-45e7-970d-56f433df99a1"],
Cell[207571, 4070, 18806, 500, 34, "Output",ExpressionUUID->"082bb364-c215-42af-8b60-a5a56b406420"]
}, Open  ]],
Cell[226392, 4573, 179, 3, 30, "Text",ExpressionUUID->"f73a8197-2138-4c56-9e50-455bcc266dd4"],
Cell[CellGroupData[{
Cell[226596, 4580, 402, 10, 30, "Input",ExpressionUUID->"c3dd38cc-b36b-4775-93a8-d9c7a8de4ce6"],
Cell[227001, 4592, 2149, 32, 69, "Output",ExpressionUUID->"740c6878-3c6d-484a-8cca-3d8cccf0b669"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229211, 4631, 363, 6, 70, "Section",ExpressionUUID->"76bdaf1e-b2ce-492a-948a-48b348d91f78"],
Cell[CellGroupData[{
Cell[229599, 4641, 665, 15, 139, "Subsection",ExpressionUUID->"5c998328-9aba-46e6-b770-35738b7162df"],
Cell[230267, 4658, 327, 9, 30, "Input",ExpressionUUID->"3631a708-e893-469b-9e65-257bfa199a15"],
Cell[230597, 4669, 481, 12, 30, "Input",ExpressionUUID->"52f916eb-a936-4ad8-9ebb-c58c3c2a1a58"],
Cell[231081, 4683, 332, 8, 30, "Input",ExpressionUUID->"824cf04c-c9bf-4ef7-92a0-ff350ba14e23"],
Cell[231416, 4693, 436, 13, 30, "Input",ExpressionUUID->"a0993d1e-bc10-45bf-8006-7f708d331b77"],
Cell[231855, 4708, 471, 13, 30, "Input",ExpressionUUID->"9a9ef8b1-b983-4afe-9c50-b296e3a2e78a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232363, 4726, 634, 13, 79, "Subsection",ExpressionUUID->"b2b82e9c-4484-4e30-acda-73a7479f8cb1"],
Cell[233000, 4741, 781, 21, 50, "Input",ExpressionUUID->"a0b16be0-e360-44bf-92be-ec634425ce06"],
Cell[233784, 4764, 350, 11, 30, "Text",ExpressionUUID->"872dba1f-46bd-4291-bace-6c54958a0169"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[234183, 4781, 190, 3, 70, "Section",ExpressionUUID->"05f39dd3-536a-4a83-a799-03aac5c8b25a"],
Cell[CellGroupData[{
Cell[234398, 4788, 222, 4, 42, "Subsection",ExpressionUUID->"1984c933-d9ca-4b09-beaa-5814655172d2"],
Cell[234623, 4794, 292, 7, 30, "Text",ExpressionUUID->"22662719-c8d6-41d3-95c2-a9acf7b695c9"],
Cell[CellGroupData[{
Cell[234940, 4805, 242, 6, 30, "Input",ExpressionUUID->"b6832bff-ef8b-4fba-8c27-81be59a23a07"],
Cell[235185, 4813, 132, 3, 30, "Output",ExpressionUUID->"25538e40-6a61-4a3f-8f1e-df166b724401"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235354, 4821, 285, 8, 30, "Input",ExpressionUUID->"eb4c8054-4cc7-45b1-9fef-e21d7ff9d39d"],
Cell[235642, 4831, 132, 3, 30, "Output",ExpressionUUID->"8b1a805c-928d-4b88-9df2-626f9feafa0d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[235823, 4840, 197, 4, 42, "Subsection",ExpressionUUID->"be6ef1da-8b75-4f18-b738-369df1cb61cd"],
Cell[236023, 4846, 221, 6, 30, "Text",ExpressionUUID->"7e70d1b3-4780-45e1-96c6-394230275607"],
Cell[CellGroupData[{
Cell[236269, 4856, 292, 7, 30, "Input",ExpressionUUID->"58cd249a-5de7-474f-98b8-ad5830b3936c"],
Cell[236564, 4865, 132, 3, 30, "Output",ExpressionUUID->"79c0ee3f-0c20-4a61-9710-6351a52b7c3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236733, 4873, 375, 10, 30, "Input",ExpressionUUID->"89a7a032-faf6-43bc-b1fc-8a7ff3d4cb47"],
Cell[237111, 4885, 255, 6, 30, "Output",ExpressionUUID->"3ea2385f-38ab-4e87-9a09-b5c25b74d151"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237403, 4896, 241, 5, 30, "Input",ExpressionUUID->"0ac209cb-4253-4a7c-b2e1-bb1b784c25c6"],
Cell[237647, 4903, 209, 4, 30, "Output",ExpressionUUID->"385ff189-287d-438d-8ddc-ca4637db5c86"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[237905, 4913, 250, 5, 42, "Subsection",ExpressionUUID->"2ee91ce7-cf5a-40c1-9eb7-6ed891d49559"],
Cell[238158, 4920, 388, 9, 30, "Text",ExpressionUUID->"b3199e78-8f03-4517-8f82-0e0b6731aecd"],
Cell[CellGroupData[{
Cell[238571, 4933, 347, 11, 30, "Input",ExpressionUUID->"866a4fa3-8149-40ce-9750-f0ef13dfd86e"],
Cell[238921, 4946, 364, 11, 30, "Output",ExpressionUUID->"b37a2e51-41e0-4e8f-b907-305a188eac94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239322, 4962, 189, 4, 30, "Input",ExpressionUUID->"108b07f4-ef11-47f4-8d1e-51e5122ca6a9"],
Cell[239514, 4968, 254, 7, 30, "Output",ExpressionUUID->"d8043855-1a77-471f-a6aa-34a9005e1256"]
}, Open  ]],
Cell[239783, 4978, 217, 5, 30, "Text",ExpressionUUID->"dc6a77f7-4e59-4bb3-8be8-6d09506265e2"],
Cell[CellGroupData[{
Cell[240025, 4987, 398, 12, 30, "Input",ExpressionUUID->"61ceda45-34e4-436d-b8bc-a0f60139d7fd"],
Cell[240426, 5001, 841, 29, 30, "Output",ExpressionUUID->"8d8d2668-cb93-4726-afa4-472b79cefd08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241304, 5035, 190, 4, 30, "Input",ExpressionUUID->"c1aaac9c-b46c-4cf6-a3cc-980b64b86a9c"],
Cell[241497, 5041, 346, 8, 30, "Output",ExpressionUUID->"4b0d7bee-0c28-47b2-8afe-be8ef805596a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241880, 5054, 215, 5, 30, "Input",ExpressionUUID->"58dadfda-d8d6-45be-98af-fd8f7b133b37"],
Cell[242098, 5061, 688, 23, 30, "Output",ExpressionUUID->"c7494757-6741-4fff-8f10-6c755b577f2c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[242847, 5091, 280, 9, 70, "Section",ExpressionUUID->"76124fb8-72d4-4b33-8184-ec2d7bd21bc7"],
Cell[243130, 5102, 494, 12, 50, "Text",ExpressionUUID->"e99a5088-d42a-40c6-8e5e-b39251badbbe"],
Cell[CellGroupData[{
Cell[243649, 5118, 353, 9, 30, "Input",ExpressionUUID->"5e5ab5c2-f2cd-48f2-9eb9-70e08d1c2268"],
Cell[244005, 5129, 260, 7, 30, "Output",ExpressionUUID->"fefa36c5-30ee-475d-8b79-5d0036b92c1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244302, 5141, 244, 6, 30, "Input",ExpressionUUID->"063b8868-08fd-48c7-8a47-b1b10c937e4a"],
Cell[244549, 5149, 277, 7, 30, "Output",ExpressionUUID->"c64ca62a-3b54-4f71-9b90-cb3ffea2b989"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244863, 5161, 212, 4, 30, "Input",ExpressionUUID->"155f11bd-c15c-4530-8288-609b693a2c24"],
Cell[245078, 5167, 258, 7, 30, "Output",ExpressionUUID->"5ab7d5ca-5e51-4e34-9dab-097e392f8570"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245373, 5179, 221, 5, 30, "Input",ExpressionUUID->"ec7e109d-b6c3-414b-a4f7-ecabad0180b4"],
Cell[245597, 5186, 271, 7, 30, "Output",ExpressionUUID->"fb2d74df-13b9-4296-981c-b71d354b9ecf"]
}, Open  ]],
Cell[245883, 5196, 648, 22, 49, "Text",ExpressionUUID->"5e50be85-eb33-4340-92d5-73857c78abd3"],
Cell[CellGroupData[{
Cell[246556, 5222, 280, 7, 30, "Input",ExpressionUUID->"4f34d427-dd67-4d89-8a18-9eaf8e7cb25b"],
Cell[246839, 5231, 253, 7, 30, "Output",ExpressionUUID->"85e459db-b7f7-4055-bba2-115d475cede5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247129, 5243, 163, 3, 30, "Input",ExpressionUUID->"983e8f47-ee8e-45d0-841e-af899a25c37d"],
Cell[247295, 5248, 253, 7, 30, "Output",ExpressionUUID->"33d19b1c-68b9-4cf6-bbc9-b5725bdbbb20"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[247597, 5261, 171, 3, 70, "Section",ExpressionUUID->"122ef3bc-b026-4fa1-bb7b-b335e7bcd2ac"],
Cell[247771, 5266, 445, 11, 30, "Text",ExpressionUUID->"85ea4728-9242-485c-8ef8-f63ee47276c3"],
Cell[CellGroupData[{
Cell[248241, 5281, 215, 5, 30, "Input",ExpressionUUID->"fe26a79e-cbe7-407c-b227-fdd36f53e28e"],
Cell[248459, 5288, 134, 3, 30, "Output",ExpressionUUID->"3f6779ea-74ad-4ce6-bfdd-d1baadf0a807"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248630, 5296, 311, 6, 30, "Input",ExpressionUUID->"aaf84b04-dcf6-4930-a2ce-23f135427c7d"],
Cell[248944, 5304, 177, 2, 30, "Output",ExpressionUUID->"349bbde4-3b80-474a-9faf-a0d7c1cd6580"]
}, Open  ]],
Cell[249136, 5309, 354, 7, 30, "Text",ExpressionUUID->"2b18259a-80aa-4870-8329-d6ff32731d96"],
Cell[249493, 5318, 623, 16, 30, "Input",ExpressionUUID->"6fc48e85-e94a-4ae0-be57-61b11b5713f7"],
Cell[CellGroupData[{
Cell[250141, 5338, 414, 8, 30, "Input",ExpressionUUID->"aea4f3b5-9503-4d25-9a0e-ce56478bdc28"],
Cell[250558, 5348, 321, 7, 30, "Output",ExpressionUUID->"f8bbceb0-4348-47da-9ef3-721911845b1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250916, 5360, 236, 6, 30, "Input",ExpressionUUID->"7caea5a3-58c4-440b-b730-ca2865e6b6a8"],
Cell[251155, 5368, 154, 3, 30, "Output",ExpressionUUID->"7c8ada71-79eb-4bfc-8b69-4d52a6d46989"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[251358, 5377, 264, 4, 70, "Section",ExpressionUUID->"96f505b3-57ed-4688-9623-13557c50a08d"],
Cell[CellGroupData[{
Cell[251647, 5385, 876, 14, 139, "Subsection",ExpressionUUID->"ebbf6bd9-a965-4c64-ba13-d23e60365f37"],
Cell[252526, 5401, 256, 6, 30, "Input",ExpressionUUID->"7f159b21-7aec-4e83-a6ba-30abf409674e"],
Cell[252785, 5409, 565, 11, 30, "Input",ExpressionUUID->"7c475fdb-d313-4943-8f80-d2eb172986bb"],
Cell[253353, 5422, 253, 6, 28, "Input",ExpressionUUID->"cb1fcce0-5748-4128-a2da-6b0f2e26aa91"],
Cell[253609, 5430, 333, 10, 28, "Input",ExpressionUUID->"241a8304-dae0-4482-b6a1-5ec03f4e996e"],
Cell[253945, 5442, 268, 7, 28, "Input",ExpressionUUID->"dd06f50c-c1d6-4fa4-8f95-05dcd6c0d9bd"],
Cell[254216, 5451, 425, 13, 28, "Input",ExpressionUUID->"8c0c143a-22b1-46fe-b099-a27384691d89"],
Cell[254644, 5466, 406, 13, 28, "Input",ExpressionUUID->"53e46e72-10b2-4d52-89ee-a4bcba890f71"],
Cell[255053, 5481, 303, 8, 28, "Input",ExpressionUUID->"c7d370fa-4fa4-4a84-bc02-6aaa24f870be"],
Cell[255359, 5491, 376, 12, 28, "Input",ExpressionUUID->"a04b185d-1e20-43aa-825f-afe3e0b6caac"],
Cell[255738, 5505, 412, 13, 28, "Input",ExpressionUUID->"776e799f-6471-4bcc-9381-098a6b5d2d47"],
Cell[256153, 5520, 360, 7, 28, "Input",ExpressionUUID->"f789d85e-e180-41a7-9c75-4bbcff33e007"],
Cell[256516, 5529, 421, 9, 28, "Input",ExpressionUUID->"b942402d-97b9-4580-a489-102b975965a4"],
Cell[256940, 5540, 311, 5, 30, "Text",ExpressionUUID->"a5893420-eb86-4db7-9c10-9529a629d90f"]
}, Open  ]],
Cell[257266, 5548, 452, 8, 69, "Subsection",ExpressionUUID->"992c4483-b41c-47a8-8da2-b8396e0a1201"],
Cell[CellGroupData[{
Cell[257743, 5560, 719, 13, 61, "Subsection",ExpressionUUID->"70cf217b-b4fe-43e8-aa02-c641e6c184e8"],
Cell[258465, 5575, 727, 20, 63, "Input",ExpressionUUID->"33de4312-b6a8-4f1e-8793-bff9527a2f36"],
Cell[CellGroupData[{
Cell[259217, 5599, 160, 3, 35, "Subsubsection",ExpressionUUID->"ff690a07-7ca9-400d-9b54-5d3f59feaae7"],
Cell[259380, 5604, 211, 5, 30, "Text",ExpressionUUID->"3898589d-d0a8-4265-8ac0-c7cd566b4234"],
Cell[259594, 5611, 505, 15, 28, "Input",ExpressionUUID->"fd23f347-629b-452d-afe0-00a0eb066411"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

